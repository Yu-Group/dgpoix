[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tiffany Tang. Author, maintainer. James Duncan. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tang T, Duncan J (2022). dgpoix: Generate synthetic data fresh real thing. R package version 0.0.1.9000.","code":"@Manual{,   title = {dgpoix: Generate synthetic data that is as fresh as the real thing},   author = {Tiffany Tang and James Duncan},   year = {2022},   note = {R package version 0.0.1.9000}, }"},{"path":"/index.html","id":"dgpoix--","dir":"","previous_headings":"","what":"dgpoix 🥕 🧅","title":"Generate synthetic data that is as fresh as the real thing","text":"dgpoix (pronounced dee-gee-pwaa) R package contains modular library data generating processes flexible, composable, easily accommodate real data, allowing rapid creation reality-inspired synthetic data. can use dgpoix create synthetic data simulation experiments evaluate new existing statistical methodologies.","code":""},{"path":"/reference/ar1_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate autoregressive Gaussian errors. — ar1_errors","title":"Generate autoregressive Gaussian errors. — ar1_errors","text":"Generate correlated Gaussian errors based autoregressive(1) covariance structure.","code":""},{"path":"/reference/ar1_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate autoregressive Gaussian errors. — ar1_errors","text":"","code":"ar1_errors(n, rho)"},{"path":"/reference/ar1_errors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate autoregressive Gaussian errors. — ar1_errors","text":"n Number samples. rho Correlation.","code":""},{"path":"/reference/ar1_errors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate autoregressive Gaussian errors. — ar1_errors","text":"vector simulated errors length n.","code":""},{"path":"/reference/ar1_errors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate autoregressive Gaussian errors. — ar1_errors","text":"","code":"errs <- ar1_errors(n = 100, rho = 0.7)"},{"path":"/reference/block_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate block-correlated Gaussian errors. — block_errors","title":"Generate block-correlated Gaussian errors. — block_errors","text":"Generate correlated Gaussian errors based block-dependence covariance structure n_blocks (approximately) equally-sized blocks.","code":""},{"path":"/reference/block_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate block-correlated Gaussian errors. — block_errors","text":"","code":"block_errors(n, n_blocks = 3, rho = 0.8)"},{"path":"/reference/block_errors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate block-correlated Gaussian errors. — block_errors","text":"n Number samples. n_blocks Number blocks. rho Correlation. Must scalar vector length k.","code":""},{"path":"/reference/block_errors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate block-correlated Gaussian errors. — block_errors","text":"vector simulated errors length n.","code":""},{"path":"/reference/block_errors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate block-correlated Gaussian errors. — block_errors","text":"","code":"errs <- block_errors(n = 100, n_blocks = 3, rho = 0.7)"},{"path":"/reference/correlated_linear_gaussian_dgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate correlated Gaussian covariates and linear response data. — correlated_linear_gaussian_dgp","title":"Generate correlated Gaussian covariates and linear response data. — correlated_linear_gaussian_dgp","text":"Generate normally-distributed covariates potentially correlated linear response data specified error distribution.","code":""},{"path":"/reference/correlated_linear_gaussian_dgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate correlated Gaussian covariates and linear response data. — correlated_linear_gaussian_dgp","text":"","code":"correlated_linear_gaussian_dgp(   n,   p_uncorr,   p_corr,   s_uncorr = p_uncorr,   s_corr = p_corr,   corr,   betas_uncorr = NULL,   betas_corr = NULL,   betas_uncorr_sd = 1,   betas_corr_sd = 1,   intercept = 0,   err = NULL,   data_split = FALSE,   train_prop = 0.5,   return_values = c(\"X\", \"y\", \"support\"),   ... )"},{"path":"/reference/correlated_linear_gaussian_dgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate correlated Gaussian covariates and linear response data. — correlated_linear_gaussian_dgp","text":"n Number samples. p_uncorr Number uncorrelated features. p_corr Number features correlated group. s_uncorr Sparsity level features uncorrelated group. Coefficients corresponding features s_uncorr position (.e., positions = s_uncorr + 1, ..., p_uncorr) set 0. s_corr Sparsity level features correlated group. Coefficients corresponding features s_corr position (.e., positions = s_corr + 1, ..., p_corr) set 0. corr Correlation features correlated group. betas_uncorr Coefficient vector uncorrelated features. scalar provided, coefficient vector constant vector. NULL (default), entries coefficient vector drawn iid N(0, betas_uncorr_sd^2). betas_corr Coefficient vector correlated features. scalar provided, coefficient vector constant vector. NULL (default), entries coefficient vector drawn iid N(0, betas_corr_sd^2). betas_uncorr_sd (Optional) SD normal distribution draw betas_uncorr. used betas_uncorr argument NULL. betas_corr_sd (Optional) SD normal distribution draw betas_corr. used betas_corr argument NULL. intercept Scalar intercept term. err Function generate simulated error vector. Default NULL adds error DGP. data_split Logical; TRUE, splits data training test sets according train_prop. train_prop Proportion data training set data_split = TRUE. return_values Character vector indicating objects return list. Elements vector must one \"X\", \"y\", \"support\". ... arguments pass err() generate error vector.","code":""},{"path":"/reference/correlated_linear_gaussian_dgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate correlated Gaussian covariates and linear response data. — correlated_linear_gaussian_dgp","text":"list named objects requested return_values. See brief descriptions . X data.frame. y response vector length nrow(X). support vector feature indices indicating features used true support DGP. Note data_split = TRUE \"X\", \"y\" return_values, returned list also contains slots \"Xtest\" \"ytest\".","code":""},{"path":"/reference/correlated_linear_gaussian_dgp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate correlated Gaussian covariates and linear response data. — correlated_linear_gaussian_dgp","text":"Data generated via: $$y = intercept + betas_uncorr \\%\\emph{\\% X_uncorr + betas_corr \\%}\\% X_corr + err(...),$$ X_uncorr (uncorrelated) standard Gaussian random matrix X_corr correlated Gaussian random matrix variance 1 Cor(X_corr_i, X_corr_j) = corr , j. true underlying support data first s_uncorr s_corr features X_uncorr X_corr respectively.","code":""},{"path":"/reference/correlated_linear_gaussian_dgp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate correlated Gaussian covariates and linear response data. — correlated_linear_gaussian_dgp","text":"","code":"# generate data from: y = betas_corr_1 * x_corr_1 + betas_corr_2 * x_corr_2 + N(0, 0.5), # where betas_corr_1, betas_corr_2 ~ N(0, 1), # Var(X_corr_i) = 1, Cor(X_corr_i, X_corr_j) = 0.7 for all i, j = 1, ..., 10 sim_data <- correlated_linear_gaussian_dgp(n = 100, p_uncorr = 0, p_corr = 10,                                            s_corr = 2, corr = 0.7,                                            err = rnorm, sd = .5)  # generate data from y = betas_uncorr %*% X_uncorr - X_corr_1 + t(df = 1), where # betas_uncorr ~ N(0, .5), betas_corr = [-1, 0], X_uncorr ~ N(0, I_10), # X_corr ~ N(0, Sigma), Sigma has 1s on diagonals and 0.7 elsewhere. sim_data <- correlated_linear_gaussian_dgp(n = 100, p_uncorr = 10, p_corr = 2,                                            corr = 0.7, betas_uncorr_sd = 1,                                            betas_corr = c(-1, 0),                                            err = rt, df = 1)"},{"path":"/reference/correlated_logistic_gaussian_dgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate correlated Gaussian covariates and (binary) logistic response data. — correlated_logistic_gaussian_dgp","title":"Generate correlated Gaussian covariates and (binary) logistic response data. — correlated_logistic_gaussian_dgp","text":"Generate normally-distributed covariates potentially correlated (binary) logistic response data.","code":""},{"path":"/reference/correlated_logistic_gaussian_dgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate correlated Gaussian covariates and (binary) logistic response data. — correlated_logistic_gaussian_dgp","text":"","code":"correlated_logistic_gaussian_dgp(   n,   p_uncorr,   p_corr,   s_uncorr = p_uncorr,   s_corr = p_corr,   corr,   betas_uncorr = NULL,   betas_corr = NULL,   betas_uncorr_sd = 1,   betas_corr_sd = 1,   intercept = 0,   data_split = FALSE,   train_prop = 0.5,   return_values = c(\"X\", \"y\", \"support\"),   ... )"},{"path":"/reference/correlated_logistic_gaussian_dgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate correlated Gaussian covariates and (binary) logistic response data. — correlated_logistic_gaussian_dgp","text":"n Number samples. p_uncorr Number uncorrelated features. p_corr Number features correlated group. s_uncorr Sparsity level features uncorrelated group. Coefficients corresponding features s_uncorr position (.e., positions = s_uncorr + 1, ..., p_uncorr) set 0. s_corr Sparsity level features correlated group. Coefficients corresponding features s_corr position (.e., positions = s_corr + 1, ..., p_corr) set 0. corr Correlation features correlated group. betas_uncorr Coefficient vector uncorrelated features. scalar provided, coefficient vector constant. NULL (default), entries coefficient vector drawn iid N(0, betas_uncorr_sd^2). Can also function generates coefficient vector; see generate_coef(). betas_corr Coefficient vector correlated features. scalar provided, coefficient vector constant. NULL (default), entries coefficient vector drawn iid N(0, betas_corr_sd^2). Can also function generates coefficient vector; see generate_coef(). betas_uncorr_sd (Optional) SD normal distribution draw betas_uncorr. used betas_uncorr argument NULL function case betas_uncorr_sd optionally passed function sd; see generate_coef(). betas_corr_sd (Optional) SD normal distribution draw betas_corr. used betas_corr argument NULL function case betas_corr_sd optionally passed function sd; see generate_coef(). intercept Scalar intercept term. data_split Logical; TRUE, splits data training test sets according train_prop. train_prop Proportion data training set data_split = TRUE. return_values Character vector indicating objects return list. Elements vector must one \"X\", \"y\", \"support\". ... used.","code":""},{"path":"/reference/correlated_logistic_gaussian_dgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate correlated Gaussian covariates and (binary) logistic response data. — correlated_logistic_gaussian_dgp","text":"list named objects requested return_values. See brief descriptions . X data.frame. y response vector length nrow(X). support vector feature indices indicating features used true support DGP. Note data_split = TRUE \"X\", \"y\" return_values, returned list also contains slots \"Xtest\" \"ytest\".","code":""},{"path":"/reference/correlated_logistic_gaussian_dgp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate correlated Gaussian covariates and (binary) logistic response data. — correlated_logistic_gaussian_dgp","text":"Data generated via: $$log(p / (1 - p)) = intercept + betas_uncorr \\%\\emph{\\% X_uncorr + betas_corr \\%}\\% X_corr,$$ p = P(y = 1 | X), X_uncorr (uncorrelated) standard Gaussian random matrix, X_corr correlated Gaussian random matrix variance 1 Cor(X_corr_i, X_corr_j) = corr , j. true underlying support data first s_uncorr s_corr features X_uncorr X_corr respectively.","code":""},{"path":"/reference/correlated_logistic_gaussian_dgp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate correlated Gaussian covariates and (binary) logistic response data. — correlated_logistic_gaussian_dgp","text":"","code":"# generate data from: log(p / (1 - p)) = betas_corr_1 * x_corr_1 + betas_corr_2 * x_corr_2, # where betas_corr_1, betas_corr_2 ~ N(0, 1), # Var(X_corr_i) = 1, Cor(X_corr_i, X_corr_j) = 0.7 for all i, j = 1, ..., 10 sim_data <- correlated_logistic_gaussian_dgp(n = 100, p_uncorr = 0, p_corr = 10,                                              s_corr = 2, corr = 0.7)  # generate data from: log(p / (1 - p)) = betas_uncorr %*% X_uncorr - X_corr_1, # where betas_uncorr ~ N(0, .5), betas_corr = [-1, 0], X_uncorr ~ N(0, I_10), # X_corr ~ N(0, Sigma), Sigma has 1s on diagonals and 0.7 elsewhere. sim_data <- correlated_logistic_gaussian_dgp(n = 100, p_uncorr = 10, p_corr = 2,                                              corr = 0.7, betas_uncorr_sd = 1,                                              betas_corr = c(-1, 0))"},{"path":"/reference/correlated_lss_gaussian_dgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate correlated Gaussian covariates and LSS response data. — correlated_lss_gaussian_dgp","title":"Generate correlated Gaussian covariates and LSS response data. — correlated_lss_gaussian_dgp","text":"Generate normally-distributed covariates potentially correlated LSS response data specified error distribution.","code":""},{"path":"/reference/correlated_lss_gaussian_dgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate correlated Gaussian covariates and LSS response data. — correlated_lss_gaussian_dgp","text":"","code":"correlated_lss_gaussian_dgp(   n,   p_uncorr,   p_corr,   s_uncorr = p_uncorr,   s_corr = p_corr,   corr,   k,   thresholds = 0,   signs = 1,   betas = 1,   intercept = 0,   overlap = FALSE,   mixed_int = FALSE,   err = NULL,   data_split = FALSE,   train_prop = 0.5,   return_values = c(\"X\", \"y\", \"support\"),   ... )"},{"path":"/reference/correlated_lss_gaussian_dgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate correlated Gaussian covariates and LSS response data. — correlated_lss_gaussian_dgp","text":"n Number samples. p_uncorr Number uncorrelated features. p_corr Number features correlated group. s_uncorr Number interactions features uncorrelated group. s_corr Number interactions features correlated group. corr Correlation features correlated group. k Order interactions. thresholds scalar s x k matrix thresholds term LSS model. signs scalar s x k matrix sign interaction (1 means > -1 means <). betas Scalar, vector, function generate coefficients corresponding interaction terms. See \\codegenerate_coef(). intercept Scalar intercept term. overlap TRUE, simulate support indices replacement; FALSE, simulate support indices without replacement (overlap) mixed_int TRUE, correlated uncorrelated variables mixed together constructing interaction order-k. FALSE, interaction order-k composed correlated variables uncorrelated variables. err Function generate simulated error vector. Default NULL adds error DGP. data_split Logical; TRUE, splits data training test sets according train_prop. train_prop Proportion data training set data_split = TRUE. return_values Character vector indicating objects return list. Elements vector must one \"X\", \"y\", \"support\", \"int_support\". ... arguments pass err() generate error vector.","code":""},{"path":"/reference/correlated_lss_gaussian_dgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate correlated Gaussian covariates and LSS response data. — correlated_lss_gaussian_dgp","text":"list named objects requested return_values. See brief descriptions . X data.frame. y response vector length nrow(X). support vector feature indices indicating features used true support DGP. int_support vector signed feature indices true (interaction) support DGP. example, \"1+_2-\" means interaction high values feature 1 low values feature 2 appears underlying DGP. Note data_split = TRUE \"X\", \"y\" return_values, returned list also contains slots \"Xtest\" \"ytest\".","code":""},{"path":"/reference/correlated_lss_gaussian_dgp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate correlated Gaussian covariates and LSS response data. — correlated_lss_gaussian_dgp","text":"Data generated via: $$y = intercept + sum_{= 1}^{s} beta_i prod_{j = 1}^{k}1(X_{S_j} lessgtr thresholds_ij) + err(...),$$ X = [X_uncorr, X_corr], X_uncorr (uncorrelated) standard Gaussian random matrix, X_corr correlated Gaussian random matrix variance 1 Cor(X_corr_i, X_corr_j) = corr , j. overlap = TRUE, true interaction support randomly chosen (p_uncorr + p_corr) features X. overlap = FALSE, true interaction support sequentially taken first s_uncorr*k features X_uncorr first s_corr*k features X_corr. details LSS model, see Behr, Merle, et al. \"Provable Boolean Interaction Recovery Tree Ensemble obtained via Random Forests.\" arXiv preprint arXiv:2102.11800 (2021).","code":""},{"path":"/reference/correlated_lss_gaussian_dgp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate correlated Gaussian covariates and LSS response data. — correlated_lss_gaussian_dgp","text":"","code":"# generate data from: y = 1(X_1 > 0, X_2 > 0) + 1(X_3 > 0, X_4 > 0), where # X is a 100 x 10 correlated Gaussian random matrix with # Var(X_i) = 1 for all i and Cor(X_i, X_j) = 0.7 for all i != j sim_data <- correlated_lss_gaussian_dgp(n = 100, p_uncorr = 0, p_corr = 10,                                         k = 2, s_corr = 2, corr = 0.7,                                         thresholds = 0, signs = 1, betas = 1)  # generate data from: y = 3 * 1(X_1 > 0, X_2 > 0) - 1(X_11 > 0, X_12 > 0) + N(0, 1), # where X = [Z, U], Z is a 100 x 10 standard Gaussian random matrix, # U is a 100 x 10 Gaussian random matrix with Var(U_i) = 1 and Cor(U_i, U_j) = 0.7 sim_data <- correlated_lss_gaussian_dgp(n = 100, p_uncorr = 10, p_corr = 10,                                         s_uncorr = 1, s_corr = 1, corr = 0.7,                                         k = 2, betas = c(3, -1), err = rnorm)  # generate data from: y = \\sum_{i = 1}^{4} \\prod_{j = 1}^{2} 1(X_{s_j} > 0), # where s_j \\in {1:4, 11:14} are randomly selected indiceds, X = [Z, U], # Z is a 100 x 10 standard Gaussian random matrix, U is a 100 x 10 Gaussian # random matrix with Var(U_i) = 1 and Cor(U_i, U_j) = 0.7 # i.e., interactions may consist of both correlated and uncorrelated features sim_data <- correlated_lss_gaussian_dgp(n = 100, p_uncorr = 10, p_corr = 10,                                         s_uncorr = 2, s_corr = 2, k = 2,                                         corr = 0.7, mixed_int = TRUE)"},{"path":"/reference/dots_to_fun_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to process ... args to pass to multiple functions. — dots_to_fun_args","title":"Helper function to process ... args to pass to multiple functions. — dots_to_fun_args","text":"Helper function process ... args pass multiple functions.","code":""},{"path":"/reference/dots_to_fun_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to process ... args to pass to multiple functions. — dots_to_fun_args","text":"","code":"dots_to_fun_args(   prefix = c(\"X\", \"U\", \"y\", \"err\", \"betas\", \"betas_unobs\", \"betas_corr\",     \"betas_uncorr\"),   ... )"},{"path":"/reference/dots_to_fun_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to process ... args to pass to multiple functions. — dots_to_fun_args","text":"prefix Character vector arbitrary prefixes use splitting entries .... example, .X_p .U_p ..., vector include \"X\" \"U\" function look arguments name prefixed \".X_\" \".U_\". ... Named arguments process.","code":""},{"path":"/reference/dots_to_fun_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to process ... args to pass to multiple functions. — dots_to_fun_args","text":"list \".optional_args\" well entries named like \".X_args\". example, \"X\" one elements input character vector prefix .X_p = 1 .X_s   = 2 passed via ..., \".X_args\" entry output list codelist(p = 1, s = 2). default value prefix, output list following entries: .X_args Args pass function generates X. .U_args Args pass function generates U. .y_args Args pass function generates y. .err_args Args pass function generates err. .betas_args Args pass function generates betas. .betas_unobs_args Args pass function generates betas_unobs. .betas_corr_args Args pass function generates betas_corr. .betas_uncorr_args Args pass function generates betas_uncorr. .optional_args Args pass optionally functions.","code":""},{"path":"/reference/generate_X_gaussian.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a normal random matrix of covariates/features. — generate_X_gaussian","title":"Generate a normal random matrix of covariates/features. — generate_X_gaussian","text":"Generate .n x .p normal random matrix specified mean covariance structure.","code":""},{"path":"/reference/generate_X_gaussian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a normal random matrix of covariates/features. — generate_X_gaussian","text":"","code":"generate_X_gaussian(.n, .p, .mean = 0, .sd = 1, .corr = 0, .Sigma = NULL)"},{"path":"/reference/generate_X_gaussian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a normal random matrix of covariates/features. — generate_X_gaussian","text":".n Number samples. .p Number features. .mean Mean normal distribution generate data. Can either scalar value vector length .p. Default 0. .sd Standard deviation normal distribution generate data. Default 1. .corr Correlation pairs features. Default 0 correlation. .Sigma (Optional) .p x .p covariance matrix normal distribution generate data. Default NULL (used). provided, arguments corr sd ignored.","code":""},{"path":"/reference/generate_X_gaussian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a normal random matrix of covariates/features. — generate_X_gaussian","text":"normal random matrix size n. x .p.","code":""},{"path":"/reference/generate_X_gaussian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a normal random matrix of covariates/features. — generate_X_gaussian","text":"","code":"# Returns 100 x 10 random Gaussian matrix with X_ij ~ N(0, 1) X <- generate_X_gaussian(.n = 100, .p = 10)  # Returns 100 x 10 random Gaussian matrix with E(X_i) = 0 for all i, # Var(X_i) = 4 for all i, and Cor(X_i, X_j) = 0.7 for all i != j X <- generate_X_gaussian(.n = 100, .p = 10, .sd = 2, .corr = 0.7)  # Returns 100 x 2 random Gaussian matrix: X ~ N(0, Sigma), where # Sigma = [3, .5; .5, 1] X <- generate_X_gaussian(   .n = 100, .p = 2, .Sigma = matrix(c(3, .5, .5, 1), nrow = 2, byrow = TRUE) )"},{"path":"/reference/generate_X_rwd.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a design matrix X by sampling from a real-world data matrix. — generate_X_rwd","title":"Generate a design matrix X by sampling from a real-world data matrix. — generate_X_rwd","text":"Generate design matrix X sampling real-world data matrix specified sampling scheme.","code":""},{"path":"/reference/generate_X_rwd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a design matrix X by sampling from a real-world data matrix. — generate_X_rwd","text":"","code":"generate_X_rwd(X, n = nrow(X), p = ncol(X), clusters = NULL, replace = FALSE)"},{"path":"/reference/generate_X_rwd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a design matrix X by sampling from a real-world data matrix. — generate_X_rwd","text":"X Data matrix data frame. n Number samples clusters NULL. clusters = NULL, number clusters. p Number features. p < ncol(X), p features sampled uniformly random full feature set. clusters (Optional) Vector cluster IDs. provided, block clustered sampling performed according clusters cluster entirely entirely retrieved sample. replace Logical. TRUE, sample observations replacement; FALSE, sample observations without replacement","code":""},{"path":"/reference/generate_X_rwd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a design matrix X by sampling from a real-world data matrix. — generate_X_rwd","text":"matrix size n x p.","code":""},{"path":"/reference/generate_X_rwd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a design matrix X by sampling from a real-world data matrix. — generate_X_rwd","text":"","code":"# get bootstrap samples from iris data set X <- generate_X_rwd(X = iris, replace = TRUE)  # leave one batch out from iris data set batch_ids <- rep(1:3, length.out = nrow(iris)) X <- generate_X_rwd(X = iris, n = 2, clusters = batch_ids)"},{"path":"/reference/generate_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to generate a coefficient vector. — generate_coef","title":"Helper function to generate a coefficient vector. — generate_coef","text":"Generate coefficient vector specified dimensions sparsity level.","code":""},{"path":"/reference/generate_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to generate a coefficient vector. — generate_coef","text":"","code":"generate_coef(.betas = NULL, .p = 1, .s = .p, .betas_name = \"betas\", ...)"},{"path":"/reference/generate_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to generate a coefficient vector. — generate_coef","text":".betas Coefficient vector function generate coefficients. scalar provided, coefficient vector constant vector. NULL (default), .s non-zero entries coefficient vector equal 0.5. function, must take one n, .s, .p, can optionally take .betas_name, along user-defined args ...) must return numeric vector length 1, .s, .p. function take n .s .p, .s passed n. .p Number features. .s Sparsity level. Coefficients corresponding features sth position (.e., positions = s + 1, ..., p) set 0. .betas_name Name coefficient variable use error message. ... Additional user arguments pass .betas .betas function.","code":""},{"path":"/reference/generate_coef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to generate a coefficient vector. — generate_coef","text":"vector length .p.","code":""},{"path":"/reference/generate_coef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to generate a coefficient vector. — generate_coef","text":"","code":"# generate constant beta = 0.5 of dimension 10 beta <- generate_coef(.p = 10)  # generate beta ~ N(1, 2) of dimension 10 beta <- generate_coef(rnorm, .p = 10, mean = 1, sd = 2)  # generate beta = [1, 1, 0, 0, 0] beta <- generate_coef(.betas = 1, .p = 5, .s = 2)  # generate beta = [1, 2, 3] beta <- generate_coef(.betas = 1:3, .p = 3)  # use a function to generate beta beta_fun <- function(.s, df) {   return(rt(n = .s, df = df)) } beta <- generate_coef(.betas = beta_fun, .p = 10, .s = 3, df = 10)  # we can do the same without wrapping rt beta <- generate_coef(.betas = rt, .p = 10, .s = 3, df = 10)"},{"path":"/reference/generate_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to generate simulated errors. — generate_errors","title":"Helper function to generate simulated errors. — generate_errors","text":"Generate simulated errors specified error function passed arguments.","code":""},{"path":"/reference/generate_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to generate simulated errors. — generate_errors","text":"","code":"generate_errors(err = NULL, n, X, ...)"},{"path":"/reference/generate_errors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to generate simulated errors. — generate_errors","text":"err Function generate simulate error vector. Default NULL returns error vector zeros. n Number samples. X Data matrix data frame. Used determine n n missing. ... arguments pass err() generate error vector.","code":""},{"path":"/reference/generate_errors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to generate simulated errors. — generate_errors","text":"vector simulated errors length n.","code":""},{"path":"/reference/generate_errors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper function to generate simulated errors. — generate_errors","text":"arguments n X (provided) automatically passed function err arguments name. Note however may unused arguments err take arguments named n /X input.","code":""},{"path":"/reference/generate_errors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to generate simulated errors. — generate_errors","text":"","code":"# generate standard Gaussian error vector of length 150 errs <- generate_errors(err = rnorm, n = 150) # or alternatively, errs <- generate_errors(err = rnorm, X = iris)  # generate Gaussian error vector with mean 0 and sd 2 errs <- generate_errors(err = rnorm, n = 150, sd = 2)  # generate error vector of all 0s errs <- generate_errors(err = NULL, n = 150)  # generate error vector from custom error function err_fun <- function(n, rho) {   # simulate correlated errors from a autoregressive-1 Gaussian process   row1 <- rho^(0:(n - 1))   Sigma <- stats::toeplitz(row1)   return(MASS::mvrnorm(1, mu = rep(0, n), Sigma = Sigma)) }  errs <- generate_errors(err = err_fun, n = 100, rho = 0.75)"},{"path":"/reference/generate_y_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate linear response data. — generate_y_linear","title":"Simulate linear response data. — generate_y_linear","text":"Generate linear response data specified error distribution given observed unobserved design matrices.","code":""},{"path":"/reference/generate_y_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate linear response data. — generate_y_linear","text":"","code":"generate_y_linear(   X,   U,   betas = NULL,   betas_unobs = NULL,   intercept = 0,   err = NULL,   return_support = FALSE,   ... )"},{"path":"/reference/generate_y_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate linear response data. — generate_y_linear","text":"X Design data matrix observed variables. U Design data matrix unobserved (omitted) variables. betas Coefficient vector observed design matrix. scalar provided, coefficient vector constant. NULL (default), entries coefficient vector drawn iid N(0, betas_sd^2). Can also function generates coefficient vector; see generate_coef(). betas_unobs Coefficient vector unobserved design matrix. scalar provided, coefficient vector constant. NULL (default), entries coefficient vector drawn iid N(0, betas_unobs_sd^2). Can also function generates coefficient vector; see generate_coef(). intercept Scalar intercept term. err Function generate simulated error vector. Default NULL adds error DGP. return_support Logical specifying whether return vector support column names. X column names, indices support used. ... Additional arguments pass functions generate betas, betas_unobs, err. argument exist one functions ignored. two functions argument name different values, use one following prefixes front argument name (passed via ...) differentiate : .betas_, .betas_unobs_, .err_. additional details, see generate_coef() generate_errors()","code":""},{"path":"/reference/generate_y_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate linear response data. — generate_y_linear","text":"return_support = TRUE, returns list two: y response vector length nrow(X). support vector feature indices indicating features used true support DGP. return_support = FALSE, returns response vector y.","code":""},{"path":"/reference/generate_y_linear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate linear response data. — generate_y_linear","text":"","code":"X <- generate_X_gaussian(.n = 100, .p = 2) U <- generate_X_gaussian(.n = 100, .p = 2)  # generate the response from: y = 3*x_1 - x_2 + N(0, 1) errors y <- generate_y_linear(X = X, betas = c(3, -1), err = rnorm)  # generate the response from: y = 3*x_1 - x_2 + u_1 + 2*u_2 y <- generate_y_linear(X = X, U = U, betas = c(3, -1), betas_unobs = c(1, 2))"},{"path":"/reference/generate_y_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate (binary) logistic response data. — generate_y_logistic","title":"Simulate (binary) logistic response data. — generate_y_logistic","text":"Generate (binary) logistic response data given observed design matrices.","code":""},{"path":"/reference/generate_y_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate (binary) logistic response data. — generate_y_logistic","text":"","code":"generate_y_logistic(X, betas = 0, intercept = 0, return_support = FALSE, ...)"},{"path":"/reference/generate_y_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate (binary) logistic response data. — generate_y_logistic","text":"X Design data matrix observed variables. betas Coefficient vector observed design matrix. scalar provided, coefficient vector constant. NULL (default), entries coefficient vector drawn iid N(0, betas_sd^2). Can also function generates coefficient vector; see generate_coef(). intercept Scalar intercept term. return_support Logical specifying whether return vector support column names. X column names, indices support used. ... used.","code":""},{"path":"/reference/generate_y_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate (binary) logistic response data. — generate_y_logistic","text":"return_support = TRUE, returns list two: y response vector length nrow(X). support vector feature indices indicating features used true support DGP. return_support = FALSE, returns response vector y.","code":""},{"path":"/reference/generate_y_logistic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate (binary) logistic response data. — generate_y_logistic","text":"","code":"X <- generate_X_gaussian(.n = 100, .p = 2)  # generate the response from: log(p / (1 - p)) = 3*x_1 - x_2 # where p = P(y  = 1 | x) y <- generate_y_logistic(X = X, betas = c(3, -1))"},{"path":"/reference/generate_y_lss.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate locally spiky smooth (LSS) response data. — generate_y_lss","title":"Generate locally spiky smooth (LSS) response data. — generate_y_lss","text":"Generate LSS response data specified error distribution given observed data matrices.","code":""},{"path":"/reference/generate_y_lss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate locally spiky smooth (LSS) response data. — generate_y_lss","text":"","code":"generate_y_lss(   X,   k,   s,   thresholds = 1,   signs = 1,   betas = 1,   intercept = 0,   overlap = FALSE,   err = NULL,   return_support = FALSE,   ... )"},{"path":"/reference/generate_y_lss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate locally spiky smooth (LSS) response data. — generate_y_lss","text":"X Data matrix data frame. k Order interactions. s Number interactions LSS model matrix support indices interaction taking row matrix ncol = k. thresholds scalar s x k matrix thresholds term LSS model. signs scalar s x k matrix sign interaction (1 means > -1 means <). betas Scalar, vector, function generate coefficients corresponding interaction terms. See \\codegenerate_coef(). intercept Scalar intercept term. overlap TRUE, simulate support indices replacement; FALSE, simulate support indices without replacement (overlap) err Function generate simulated error vector. Default NULL adds error DGP. return_support Logical specifying whether return vector support column names. X column names, indices support used. ... arguments pass err() generate error vector.","code":""},{"path":"/reference/generate_y_lss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate locally spiky smooth (LSS) response data. — generate_y_lss","text":"return_support = TRUE, returns list three: y response vector length nrow(X). support vector feature indices indicating features used true support DGP. int_support vector signed feature indices true (interaction) support DGP. example, \"1+_2-\" means interaction high values feature 1 low values feature 2 appears underlying DGP. return_support = FALSE, returns response vector y.","code":""},{"path":"/reference/generate_y_lss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate locally spiky smooth (LSS) response data. — generate_y_lss","text":", data generated following LSS model: $$E(Y|X) = intercept + sum_{= 1}^{s} beta_i prod_{j = 1}^{k}1(X_{S_j} \tlessgtr thresholds_ij)$$ details LSS model, see Behr, Merle, et al. \"Provable Boolean Interaction Recovery Tree Ensemble obtained via Random Forests.\" arXiv preprint arXiv:2102.11800 (2021).","code":""},{"path":"/reference/generate_y_lss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate locally spiky smooth (LSS) response data. — generate_y_lss","text":"","code":"X <- generate_X_gaussian(.n = 100, .p = 10)  # generate data from: y = 1(X_1 > 0, X_2 > 0) + 1(X_3 > 0, X_4 > 0) y <- generate_y_lss(X = X, k = 2, s = matrix(1:4, nrow = 2, byrow = TRUE),                     thresholds = 0, signs = 1, betas = 1)  # generate data from: y = 3 * 1(X_1 < 0) - 1(X_2 > 1) + N(0, 1) y <- generate_y_lss(X = X, k = 1,                      s = matrix(1:2, nrow = 2),                     thresholds = matrix(0:1, nrow = 2),                      signs = matrix(c(-1, 1), nrow = 2),                     betas = c(3, -1),                     err = rnorm)"},{"path":"/reference/indicator.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to compute indicator function in LSS model. — indicator","title":"Helper function to compute indicator function in LSS model. — indicator","text":"Helper function compute indicator function LSS model.","code":""},{"path":"/reference/indicator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to compute indicator function in LSS model. — indicator","text":"","code":"indicator(X, thresh, sgn)"},{"path":"/reference/indicator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to compute indicator function in LSS model. — indicator","text":"X Data matrix data frame. thresh thresholds sgn sign interaction","code":""},{"path":"/reference/linear_gaussian_dgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate independent Gaussian covariates and linear response data. — linear_gaussian_dgp","title":"Generate independent Gaussian covariates and linear response data. — linear_gaussian_dgp","text":"Generate independent normally-distributed covariates (including potentially omitted variables) linear response data specified error distribution.","code":""},{"path":"/reference/linear_gaussian_dgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate independent Gaussian covariates and linear response data. — linear_gaussian_dgp","text":"","code":"linear_gaussian_dgp(   n,   p_obs = 0,   p_unobs = 0,   s_obs = p_obs,   s_unobs = p_unobs,   betas = NULL,   betas_unobs = NULL,   intercept = 0,   err = NULL,   data_split = FALSE,   train_prop = 0.5,   return_values = c(\"X\", \"y\", \"support\"),   ... )"},{"path":"/reference/linear_gaussian_dgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate independent Gaussian covariates and linear response data. — linear_gaussian_dgp","text":"n Number samples. p_obs Number observed features. p_unobs Number unobserved (omitted) features. s_obs Sparsity level observed features. Coefficients corresponding features s_obs position (.e., positions = s_obs + 1, ..., p_obs) set 0. s_unobs Sparsity level unobserved (omitted) features. Coefficients corresponding features s_unobs position (.e., positions = s_unobs + 1, ..., p_unobs) set 0. betas Coefficient vector observed design matrix. scalar provided, coefficient vector constant. NULL (default), entries coefficient vector drawn iid N(0, betas_sd^2). Can also function generates coefficient vector; see generate_coef(). betas_unobs Coefficient vector unobserved design matrix. scalar provided, coefficient vector constant. NULL (default), entries coefficient vector drawn iid N(0, betas_unobs_sd^2). Can also function generates coefficient vector; see generate_coef(). intercept Scalar intercept term. err Function generate simulated error vector. Default NULL adds error DGP. data_split Logical; TRUE, splits data training test sets according train_prop. train_prop Proportion data training set data_split = TRUE. return_values Character vector indicating objects return list. Elements vector must one \"X\", \"y\", \"support\". ... Additional arguments pass functions generate X, U, y, betas, betas_unobs, err. argument exist one functions ignored. two functions argument name different values, use one following prefixes front argument name (passed via ...) differentiate : .X_, .U_, .y_, .betas_, .betas_unobs_, .err_. additional details, see generate_X_gaussian(), generate_y_linear(), generate_coef(), generate_errors()","code":""},{"path":"/reference/linear_gaussian_dgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate independent Gaussian covariates and linear response data. — linear_gaussian_dgp","text":"list named objects requested return_values. See brief descriptions . X data.frame. y response vector length nrow(X). support vector feature indices indicating features used true support DGP. Note data_split = TRUE \"X\", \"y\" return_values, returned list also contains slots \"Xtest\" \"ytest\".","code":""},{"path":"/reference/linear_gaussian_dgp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate independent Gaussian covariates and linear response data. — linear_gaussian_dgp","text":"Data generated via: $$y = intercept + betas \\%\\emph{\\% X + betas_unobs \\%}\\% U + err(...),$$ X, U standard Gaussian random matrices true underlying support data first s_obs s_unobs features X U respectively.","code":""},{"path":"/reference/linear_gaussian_dgp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate independent Gaussian covariates and linear response data. — linear_gaussian_dgp","text":"","code":"# generate data from: y = betas_1 * x_1 + betas_2 * x_2 + N(0, 0.5), where # betas_1, betas_2 ~ N(0, 1) and X ~ N(0, I_10) sim_data <- linear_gaussian_dgp(n = 100, p_obs = 10, s_obs = 2, betas_sd = 1,                                 err = rnorm, sd = .5)  # generate data from y = betas %*% X - u_1 + t(df = 1), where # betas ~ N(0, .5), betas_unobs = [-1, 0], X ~ N(0, I_10), U ~ N(0, I_2) sim_data <- linear_gaussian_dgp(n = 100, p_obs = 10, p_unobs = 2,                                 betas_sd = .5, betas_unobs = c(-1, 0),                                 err = rt, df = 1)"},{"path":"/reference/logistic_gaussian_dgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate independent Gaussian covariates and (binary) logistic response data. — logistic_gaussian_dgp","title":"Generate independent Gaussian covariates and (binary) logistic response data. — logistic_gaussian_dgp","text":"Generate independent normally-distributed covariates logistic response data.","code":""},{"path":"/reference/logistic_gaussian_dgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate independent Gaussian covariates and (binary) logistic response data. — logistic_gaussian_dgp","text":"","code":"logistic_gaussian_dgp(   n,   p,   s = p,   betas = NULL,   betas_sd = 1,   intercept = 0,   data_split = FALSE,   train_prop = 0.5,   return_values = c(\"X\", \"y\", \"support\"),   ... )"},{"path":"/reference/logistic_gaussian_dgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate independent Gaussian covariates and (binary) logistic response data. — logistic_gaussian_dgp","text":"n Number samples. p Number features. s Sparsity level features. Coefficients corresponding features s position (.e., positions = s + 1, ..., p) set 0. betas Coefficient vector observed design matrix. scalar provided, coefficient vector constant. NULL (default), entries coefficient vector drawn iid N(0, betas_sd^2). Can also function generates coefficient vector; see generate_coef(). betas_sd (Optional) SD normal distribution draw betas. used betas argument NULL function case betas_sd optionally passed function sd; see generate_coef(). intercept Scalar intercept term. data_split Logical; TRUE, splits data training test sets according train_prop. train_prop Proportion data training set data_split = TRUE. return_values Character vector indicating objects return list. Elements vector must one \"X\", \"y\", \"support\". ... used.","code":""},{"path":"/reference/logistic_gaussian_dgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate independent Gaussian covariates and (binary) logistic response data. — logistic_gaussian_dgp","text":"list named objects requested return_values. See brief descriptions . X data.frame. y response vector length nrow(X). support vector feature indices indicating features used true support DGP. Note data_split = TRUE \"X\", \"y\" return_values, returned list also contains slots \"Xtest\" \"ytest\".","code":""},{"path":"/reference/logistic_gaussian_dgp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate independent Gaussian covariates and (binary) logistic response data. — logistic_gaussian_dgp","text":"Data generated via: $$log(p / (1 - p)) = intercept + betas \\%*\\% X,$$ p = P(y = 1 | X), X standard Gaussian random matrix, true underlying support data first s features X (unless specified otherwise betas).","code":""},{"path":"/reference/logistic_gaussian_dgp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate independent Gaussian covariates and (binary) logistic response data. — logistic_gaussian_dgp","text":"","code":"# generate data from: log(p / (1 - p)) = betas_1 * x_1 + betas_2 * x_2, where # betas_1, betas_2 ~ N(0, 1) and X ~ N(0, I_10) sim_data <- logistic_gaussian_dgp(n = 100, p = 10, s = 2, betas_sd = 1)"},{"path":"/reference/lss_gaussian_dgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate independent Gaussian covariates and LSS response data. — lss_gaussian_dgp","title":"Generate independent Gaussian covariates and LSS response data. — lss_gaussian_dgp","text":"Generate independent normally-distributed covariates LSS response data specified error distribution.","code":""},{"path":"/reference/lss_gaussian_dgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate independent Gaussian covariates and LSS response data. — lss_gaussian_dgp","text":"","code":"lss_gaussian_dgp(   n,   p,   k,   s,   thresholds = 0,   signs = 1,   betas = 1,   intercept = 0,   overlap = FALSE,   err = NULL,   data_split = FALSE,   train_prop = 0.5,   return_values = c(\"X\", \"y\", \"support\"),   ... )"},{"path":"/reference/lss_gaussian_dgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate independent Gaussian covariates and LSS response data. — lss_gaussian_dgp","text":"n Number samples. p Number features. k Order interactions. s Number interactions LSS model matrix support indices interaction taking row matrix ncol = k. thresholds scalar s x k matrix thresholds term LSS model. signs scalar s x k matrix sign interaction (1 means > -1 means <). betas Scalar, vector, function generate coefficients corresponding interaction terms. See \\codegenerate_coef(). intercept Scalar intercept term. overlap TRUE, simulate support indices replacement; FALSE, simulate support indices without replacement (overlap) err Function generate simulated error vector. Default NULL adds error DGP. data_split Logical; TRUE, splits data training test sets according train_prop. train_prop Proportion data training set data_split = TRUE. return_values Character vector indicating objects return list. Elements vector must one \"X\", \"y\", \"support\", \"int_support\". ... arguments pass err() generate error vector.","code":""},{"path":"/reference/lss_gaussian_dgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate independent Gaussian covariates and LSS response data. — lss_gaussian_dgp","text":"list named objects requested return_values. See brief descriptions . X data.frame. y response vector length nrow(X). support vector feature indices indicating features used true support DGP. int_support vector signed feature indices true (interaction) support DGP. example, \"1+_2-\" means interaction high values feature 1 low values feature 2 appears underlying DGP. Note data_split = TRUE \"X\", \"y\" return_values, returned list also contains slots \"Xtest\" \"ytest\".","code":""},{"path":"/reference/lss_gaussian_dgp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate independent Gaussian covariates and LSS response data. — lss_gaussian_dgp","text":"Data generated via: $$y = intercept + sum_{= 1}^{s} beta_i prod_{j = 1}^{k}1(X_{S_j} lessgtr thresholds_ij) + err(...),$$ X standard Gaussian random matrix. overlap = TRUE, true interaction support randomly chosen p features X. overlap = FALSE, true interaction support sequentially taken first s*k features X. details LSS model, see Behr, Merle, et al. \"Provable Boolean Interaction Recovery Tree Ensemble obtained via Random Forests.\" arXiv preprint arXiv:2102.11800 (2021).","code":""},{"path":"/reference/lss_gaussian_dgp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate independent Gaussian covariates and LSS response data. — lss_gaussian_dgp","text":"","code":"# generate data from: y = 1(X_1 > 0, X_2 > 0) + 1(X_3 > 0, X_4 > 0), where # X is a 100 x 10 standard Gaussian random matrix sim_data <- lss_gaussian_dgp(n = 100, p = 10, k = 2, s = 2,                              thresholds = 0, signs = 1, betas = 1)  # generate data from: y = 3 * 1(X_1 < 0) - 1(X_2 > 1) + N(0, 1), where # X is a 100 x 10 standard Gaussian random matrix sim_data <- lss_gaussian_dgp(n = 100, p = 10, k = 1, s = 2,                              thresholds = matrix(0:1, nrow = 2),                              signs = matrix(c(-1, 1), nrow = 2),                              betas = c(3, -1),                              err = rnorm)"},{"path":"/reference/norm_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate heteroskedastic Gaussian errors based on the norm of X. — norm_errors","title":"Generate heteroskedastic Gaussian errors based on the norm of X. — norm_errors","text":"Generate independent Gaussian errors variance proportional norm row observations data matrix X. , epsilon_i ~ N(0, scale * ||x_i||_2^2).","code":""},{"path":"/reference/norm_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate heteroskedastic Gaussian errors based on the norm of X. — norm_errors","text":"","code":"norm_errors(X, scale = 1)"},{"path":"/reference/norm_errors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate heteroskedastic Gaussian errors based on the norm of X. — norm_errors","text":"X Data matrix data frame. scale Multiplicative scale factor.","code":""},{"path":"/reference/norm_errors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate heteroskedastic Gaussian errors based on the norm of X. — norm_errors","text":"vector simulated errors length n.","code":""},{"path":"/reference/norm_errors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate heteroskedastic Gaussian errors based on the norm of X. — norm_errors","text":"","code":"errs <- norm_errors(X = iris %>% dplyr::select(-Species))"},{"path":"/reference/omitted_var_dgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate data from a model with omitted variable bias. — omitted_var_dgp","title":"Generate data from a model with omitted variable bias. — omitted_var_dgp","text":"Takes data-generating process (DGP), induces bias due omitted variable(s). words, function generate design matrix X response vector y according inputted DGP function, return partially missing design matrix, variable/feature columns omitted.","code":""},{"path":"/reference/omitted_var_dgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate data from a model with omitted variable bias. — omitted_var_dgp","text":"","code":"omitted_var_dgp(dgp_fun, omitted_vars = 1, ...)"},{"path":"/reference/omitted_var_dgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate data from a model with omitted variable bias. — omitted_var_dgp","text":"dgp_fun function generates data according known data-generating process. function return object format output return_DGP_output(). omitted_vars vector indices column names corresponding columns X omitted. ... Additional arguments pass dgp_fun().","code":""},{"path":"/reference/omitted_var_dgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate data from a model with omitted variable bias. — omitted_var_dgp","text":"returned object format output dgp_fun(), except specified variables, given omitted_vars, omitted X component support (applicable).","code":""},{"path":"/reference/omitted_var_dgp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate data from a model with omitted variable bias. — omitted_var_dgp","text":"","code":"# generate data from a linear gaussian DGP with the first variable missing dgp_out <- omitted_var_dgp(dgp_fun = linear_gaussian_dgp,                            n = 100, p_obs = 10, s_obs = 2,                            omitted_vars = 1) # or equivalently, (minus the difference in column names) dgp_out <- linear_gaussian_dgp(n = 10, p_obs = 9, p_unobs = 1,                                s_obs = 1, s_unobs = 1)"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/return_DGP_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Developer function to return consistent outputs in DGP. — return_DGP_output","title":"Developer function to return consistent outputs in DGP. — return_DGP_output","text":"Helper function returns consistent output DGP function.","code":""},{"path":"/reference/return_DGP_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Developer function to return consistent outputs in DGP. — return_DGP_output","text":"","code":"return_DGP_output(X, y, support, data_split, train_prop, return_values)"},{"path":"/reference/return_DGP_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Developer function to return consistent outputs in DGP. — return_DGP_output","text":"X Data matrix data frame. y Response vector. support Vector feature indices true support DGP. data_split Logical; TRUE, splits data training test sets according train_prop. train_prop Proportion data training set data_split = TRUE. return_values Character vector indicating objects return list. Elements vector must one \"X\", \"y\", \"support\".","code":""},{"path":"/reference/return_DGP_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Developer function to return consistent outputs in DGP. — return_DGP_output","text":"list named objects requested return_values. See brief descriptions . X data.frame. y response vector length nrow(X). support vector feature indices indicating features used true support DGP. Note data_split = TRUE \"X\", \"y\" return_values, returned list also contains slots \"Xtest\" \"ytest\".","code":""},{"path":"/reference/return_DGP_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Developer function to return consistent outputs in DGP. — return_DGP_output","text":"","code":"# Return training/test splits using iris data and completely dense support  dgp_out <- return_DGP_output(X = iris %>% dplyr::select(-Species),                              y = iris$Species,                              support = 1:4,                              data_split = TRUE,                              train_prop = 0.5,                              return_values = c(\"X\", \"y\", \"support\"))"},{"path":"/reference/rwd_dgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in real world data from X and y. — rwd_dgp","title":"Read in real world data from X and y. — rwd_dgp","text":"Read real world data X y.","code":""},{"path":"/reference/rwd_dgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in real world data from X and y. — rwd_dgp","text":"","code":"rwd_dgp(   X,   y,   support = NULL,   data_split = FALSE,   train_prop = 0.5,   return_values = c(\"X\", \"y\") )"},{"path":"/reference/rwd_dgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in real world data from X and y. — rwd_dgp","text":"X Data matrix data frame. y Response vector. support Vector feature indices true support DGP. data_split Logical; TRUE, splits data training test sets according train_prop. train_prop Proportion data training set data_split = TRUE. return_values Character vector indicating objects return list. Elements vector must one \"X\", \"y\", \"support\".","code":""},{"path":"/reference/rwd_dgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in real world data from X and y. — rwd_dgp","text":"list named objects requested return_values. See brief descriptions . X data.frame. y response vector length nrow(X). support vector feature indices indicating features used true support DGP. Note data_split = TRUE \"X\", \"y\" return_values, returned list also contains slots \"Xtest\" \"ytest\".","code":""},{"path":"/reference/rwd_dgp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in real world data from X and y. — rwd_dgp","text":"","code":"# read in iris data iris_data <- rwd_dgp(X = iris %>% dplyr::select(-Species), y = iris$Species)"},{"path":"/reference/shared_dgp_lib_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Arguments that are shared by multiple DGP library functions. — shared_dgp_lib_args","title":"Arguments that are shared by multiple DGP library functions. — shared_dgp_lib_args","text":"Arguments shared multiple DGP library functions.","code":""},{"path":"/reference/shared_dgp_lib_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arguments that are shared by multiple DGP library functions. — shared_dgp_lib_args","text":"betas Coefficient vector observed design matrix. scalar provided, coefficient vector constant. NULL (default), entries coefficient vector drawn iid N(0, betas_sd^2). Can also function generates coefficient vector; see generate_coef(). betas_sd (Optional) SD normal distribution draw betas. used betas argument NULL function case betas_sd optionally passed function sd; see generate_coef(). betas_unobs Coefficient vector unobserved design matrix. scalar provided, coefficient vector constant. NULL (default), entries coefficient vector drawn iid N(0, betas_unobs_sd^2). Can also function generates coefficient vector; see generate_coef(). betas_unobs_sd (Optional) SD normal distribution draw betas_unobs. used betas_unobs argument NULL function case betas_unobs_sd optionally passed function sd; see generate_coef(). betas_corr Coefficient vector correlated features. scalar provided, coefficient vector constant. NULL (default), entries coefficient vector drawn iid N(0, betas_corr_sd^2). Can also function generates coefficient vector; see generate_coef(). betas_corr_sd (Optional) SD normal distribution draw betas_corr. used betas_corr argument NULL function case betas_corr_sd optionally passed function sd; see generate_coef(). betas_uncorr Coefficient vector uncorrelated features. scalar provided, coefficient vector constant. NULL (default), entries coefficient vector drawn iid N(0, betas_uncorr_sd^2). Can also function generates coefficient vector; see generate_coef(). betas_uncorr_sd (Optional) SD normal distribution draw betas_uncorr. used betas_uncorr argument NULL function case betas_uncorr_sd optionally passed function sd; see generate_coef(). data_split Logical; TRUE, splits data training test sets according train_prop. err Function generate simulated error vector. Default NULL adds error DGP. intercept Scalar intercept term. n, .n Number samples. p, .p Number features. return_support Logical specifying whether return vector support column names. X column names, indices support used. return_values Character vector indicating objects return list. Elements vector must one \"X\", \"y\", \"support\". support Vector feature indices true support DGP. train_prop Proportion data training set data_split = TRUE. X Data matrix data frame. y Response vector. ... arguments pass err() generate error vector.","code":""},{"path":"/reference/shared_dgp_lib_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arguments that are shared by multiple DGP library functions. — shared_dgp_lib_args","text":"list named objects requested return_values. See brief descriptions . X data.frame. y response vector length nrow(X). support vector feature indices indicating features used true support DGP. Note data_split = TRUE \"X\", \"y\" return_values, returned list also contains slots \"Xtest\" \"ytest\".","code":""},{"path":"/reference/split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to split data into training and test sets — split_data","title":"Helper function to split data into training and test sets — split_data","text":"Helper function split data training test sets","code":""},{"path":"/reference/split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to split data into training and test sets — split_data","text":"","code":"split_data(X, y, train_prop = 0.5)"},{"path":"/reference/split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to split data into training and test sets — split_data","text":"X Data matrix data frame. y Response vector. train_prop Proportion data training set.","code":""},{"path":"/reference/split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to split data into training and test sets — split_data","text":"list four: \"X\", \"y\", \"Xtest\", \"ytest\" containing training data, training response, test data, test response, respectively.","code":""},{"path":"/reference/xy_dgp_constructor.html","id":null,"dir":"Reference","previous_headings":"","what":"General DGP constructor function to generate X and y data. — xy_dgp_constructor","title":"General DGP constructor function to generate X and y data. — xy_dgp_constructor","text":"general DGP constructor function generates X y data supervised learning DGP, provided functions simulating X, y, additive error term.","code":""},{"path":"/reference/xy_dgp_constructor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General DGP constructor function to generate X and y data. — xy_dgp_constructor","text":"","code":"xy_dgp_constructor(   n,   X_fun,   y_fun,   err_fun = NULL,   add_err = TRUE,   data_split = FALSE,   train_prop = 0.5,   return_values = c(\"X\", \"y\", \"support\"),   ... )"},{"path":"/reference/xy_dgp_constructor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General DGP constructor function to generate X and y data. — xy_dgp_constructor","text":"n Number samples. X_fun Function generate X data. Must take argument n .n determines number observations generate. y_fun Function generate y data. Must take argument X accepts result X_fun. err_fun Function generate error/noise data. Default NULL adds error output y_fun(). add_err Logical. TRUE (default), add result err_fun() result y_fun() obtain simulated response vector. FALSE, return err_fun(y_fun(...), ...) simulated response vector. Note add_err = TRUE return error categorical responses y. data_split Logical; TRUE, splits data training test sets according train_prop. train_prop Proportion data training set data_split = TRUE. return_values Character vector indicating objects return list. Elements vector must one \"X\", \"y\", \"support\". ... Additional arguments pass functions generate X, y, err. argument exist one functions ignored. two functions argument name different values, use one following prefixes front argument name (passed via ...) differentiate : .X_, .y_, .err_.","code":""},{"path":"/reference/xy_dgp_constructor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General DGP constructor function to generate X and y data. — xy_dgp_constructor","text":"list named objects requested return_values. See brief descriptions . X data.frame. y response vector length nrow(X). support vector feature indices indicating features used true support DGP. Note data_split = TRUE \"X\", \"y\" return_values, returned list also contains slots \"Xtest\" \"ytest\".","code":""},{"path":"/reference/xy_dgp_constructor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"General DGP constructor function to generate X and y data. — xy_dgp_constructor","text":"add_err = TRUE, data generated following additive model: $$y = y_fun(X, ...) + err_fun(X, y_fun(X), ...), X = X_fun(...).$$ add_err = FALSE, data generated via: $$y = err_fun(X, y_fun(X, ...), ...), X = X_fun(...).$$ Note err_fun() allowed depend X y, necessary err_fun() depend X y.","code":""},{"path":"/reference/xy_dgp_constructor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General DGP constructor function to generate X and y data. — xy_dgp_constructor","text":"","code":"# generate X = 100 x 10 standard Gaussian, y = linear regression model sim_data <- xy_dgp_constructor(X_fun = MASS::mvrnorm,                                y_fun = generate_y_linear,                                err_fun = rnorm, data_split = TRUE,                                # shared dgp arguments                                n = 100,                                # arguments specifically for X_fun                                .X_mu = rep(0, 10), .X_Sigma = diag(10),                                # arguments specifically for y_fun                                .y_betas = rnorm(10), .y_return_support = TRUE,                                # arguments specifically for err_fun                                .err_sd = 1) # or alternatively, (since arguments of X_fun, y_fun, err_fun are unique, # with the exception of `n`) sim_data <- xy_dgp_constructor(X_fun = MASS::mvrnorm,                                y_fun = generate_y_linear,                                err_fun = rnorm, data_split = TRUE,                                # shared dgp arguments                                n = 100,                                # arguments specifically for X_fun                                mu = rep(0, 10), Sigma = diag(10),                                # arguments specifically for y_fun                                betas = rnorm(10), return_support = TRUE,                                # arguments specifically for err_fun                                sd = 1)"}]
