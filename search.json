[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 vdgp authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tiffany Tang. Author, maintainer. James Duncan. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tang T, Duncan J (2022). dgpoix: Generate synthetic data fresh real thing. R package version 0.0.1.9000.","code":"@Manual{,   title = {dgpoix: Generate synthetic data that is as fresh as the real thing},   author = {Tiffany Tang and James Duncan},   year = {2022},   note = {R package version 0.0.1.9000}, }"},{"path":"/index.html","id":"dgpoix--","dir":"","previous_headings":"","what":"dgpoix ü•ï üßÖ","title":"Generate synthetic data that is as fresh as the real thing","text":"dgpoix (pronounced dee-gee-pwaa) R package contains modular library data generating processes flexible, composable, easily accommodate real data, allowing rapid creation reality-inspired synthetic data. can use dgpoix create synthetic data simulation experiments evaluate new existing statistical methodologies.","code":""},{"path":"/reference/ar1_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate autoregressive Gaussian errors. ‚Äî ar1_errors","title":"Generate autoregressive Gaussian errors. ‚Äî ar1_errors","text":"Generate correlated Gaussian errors based autoregressive(1) covariance structure.","code":""},{"path":"/reference/ar1_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate autoregressive Gaussian errors. ‚Äî ar1_errors","text":"","code":"ar1_errors(n, rho)"},{"path":"/reference/ar1_errors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate autoregressive Gaussian errors. ‚Äî ar1_errors","text":"n Number samples. rho Correlation.","code":""},{"path":"/reference/ar1_errors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate autoregressive Gaussian errors. ‚Äî ar1_errors","text":"vector simulated errors length n.","code":""},{"path":"/reference/ar1_errors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate autoregressive Gaussian errors. ‚Äî ar1_errors","text":"","code":"errs <- ar1_errors(n = 100, rho = 0.7)"},{"path":"/reference/block_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate block-correlated Gaussian errors. ‚Äî block_errors","title":"Generate block-correlated Gaussian errors. ‚Äî block_errors","text":"Generate correlated Gaussian errors based block-dependence covariance structure n_blocks (approximately) equally-sized blocks.","code":""},{"path":"/reference/block_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate block-correlated Gaussian errors. ‚Äî block_errors","text":"","code":"block_errors(n, n_blocks = 3, rho = 0.8)"},{"path":"/reference/block_errors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate block-correlated Gaussian errors. ‚Äî block_errors","text":"n Number samples. n_blocks Number blocks. rho Correlation. Must scalar vector length k.","code":""},{"path":"/reference/block_errors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate block-correlated Gaussian errors. ‚Äî block_errors","text":"vector simulated errors length n.","code":""},{"path":"/reference/block_errors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate block-correlated Gaussian errors. ‚Äî block_errors","text":"","code":"errs <- block_errors(n = 100, n_blocks = 3, rho = 0.7)"},{"path":"/reference/correlated_linear_gaussian_dgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate correlated Gaussian covariates and linear response data. ‚Äî correlated_linear_gaussian_dgp","title":"Generate correlated Gaussian covariates and linear response data. ‚Äî correlated_linear_gaussian_dgp","text":"Generate normally-distributed covariates potentially correlated linear response data specified error distribution.","code":""},{"path":"/reference/correlated_linear_gaussian_dgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate correlated Gaussian covariates and linear response data. ‚Äî correlated_linear_gaussian_dgp","text":"","code":"correlated_linear_gaussian_dgp(   n,   p_uncorr,   p_corr,   s_uncorr = p_uncorr,   s_corr = p_corr,   corr,   betas_uncorr = NULL,   betas_corr = NULL,   betas_uncorr_sd = 1,   betas_corr_sd = 1,   intercept = 0,   err = NULL,   data_split = FALSE,   train_prop = 0.5,   return_values = c(\"X\", \"y\", \"support\"),   ... )"},{"path":"/reference/correlated_linear_gaussian_dgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate correlated Gaussian covariates and linear response data. ‚Äî correlated_linear_gaussian_dgp","text":"n Number samples. p_uncorr Number uncorrelated features. p_corr Number features correlated group. s_uncorr Sparsity level features uncorrelated group. Coefficients corresponding features s_uncorr position (.e., positions = s_uncorr + 1, ..., p_uncorr) set 0. s_corr Sparsity level features correlated group. Coefficients corresponding features s_corr position (.e., positions = s_corr + 1, ..., p_corr) set 0. corr Correlation features correlated group. betas_uncorr Coefficient vector uncorrelated features. scalar provided, coefficient vector constant vector. NULL (default), entries coefficient vector drawn iid N(0, betas_uncorr_sd^2). betas_corr Coefficient vector correlated features. scalar provided, coefficient vector constant vector. NULL (default), entries coefficient vector drawn iid N(0, betas_corr_sd^2). betas_uncorr_sd (Optional) SD normal distribution draw betas_uncorr. used betas_uncorr argument NULL. betas_corr_sd (Optional) SD normal distribution draw betas_corr. used betas_corr argument NULL. intercept Scalar intercept term. err Function generate simulated error vector. Default NULL adds error DGP. data_split Logical; TRUE, splits data training test sets according train_prop. train_prop Proportion data training set data_split = TRUE. return_values Character vector indicating objects return list. Elements vector must one \"X\", \"y\", \"support\". ... arguments pass err() generate error vector.","code":""},{"path":"/reference/correlated_linear_gaussian_dgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate correlated Gaussian covariates and linear response data. ‚Äî correlated_linear_gaussian_dgp","text":"list named objects requested return_values. See brief descriptions . X data.frame. y response vector length nrow(X). support vector feature indices indicating features used true support DGP. Note data_split = TRUE \"X\", \"y\" return_values, returned list also contains slots \"Xtest\" \"ytest\".","code":""},{"path":"/reference/correlated_linear_gaussian_dgp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate correlated Gaussian covariates and linear response data. ‚Äî correlated_linear_gaussian_dgp","text":"Data generated via: $$y = intercept + betas_uncorr \\%\\emph{\\% X_uncorr + betas_corr \\%}\\% X_corr + err(...),$$ X_uncorr (uncorrelated) standard Gaussian random matrix X_corr correlated Gaussian random matrix variance 1 Cor(X_corr_i, X_corr_j) = corr , j. true underlying support data first s_uncorr s_corr features X_uncorr X_corr respectively.","code":""},{"path":"/reference/correlated_linear_gaussian_dgp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate correlated Gaussian covariates and linear response data. ‚Äî correlated_linear_gaussian_dgp","text":"","code":"# generate data from: y = betas_corr_1 * x_corr_1 + betas_corr_2 * x_corr_2 + N(0, 0.5), # where betas_corr_1, betas_corr_2 ~ N(0, 1), # Var(X_corr_i) = 1, Cor(X_corr_i, X_corr_j) = 0.7 for all i, j = 1, ..., 10 sim_data <- correlated_linear_gaussian_dgp(n = 100, p_uncorr = 0, p_corr = 10,                                            s_corr = 2, corr = 0.7,                                            err = rnorm, sd = .5)  # generate data from y = betas_uncorr %*% X_uncorr - X_corr_1 + t(df = 1), where # betas_uncorr ~ N(0, .5), betas_corr = [-1, 0], X_uncorr ~ N(0, I_10), # X_corr ~ N(0, Sigma), Sigma has 1s on diagonals and 0.7 elsewhere. sim_data <- correlated_linear_gaussian_dgp(n = 100, p_uncorr = 10, p_corr = 2,                                            corr = 0.7, betas_uncorr_sd = 1,                                            betas_corr = c(-1, 0),                                            err = rt, df = 1)"},{"path":"/reference/correlated_logistic_gaussian_dgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate correlated Gaussian covariates and (binary) logistic response data. ‚Äî correlated_logistic_gaussian_dgp","title":"Generate correlated Gaussian covariates and (binary) logistic response data. ‚Äî correlated_logistic_gaussian_dgp","text":"Generate normally-distributed covariates potentially correlated (binary) logistic response data.","code":""},{"path":"/reference/correlated_logistic_gaussian_dgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate correlated Gaussian covariates and (binary) logistic response data. ‚Äî correlated_logistic_gaussian_dgp","text":"","code":"correlated_logistic_gaussian_dgp(   n,   p_uncorr,   p_corr,   s_uncorr = p_uncorr,   s_corr = p_corr,   corr,   betas_uncorr = NULL,   betas_corr = NULL,   betas_uncorr_sd = 1,   betas_corr_sd = 1,   intercept = 0,   data_split = FALSE,   train_prop = 0.5,   return_values = c(\"X\", \"y\", \"support\"),   ... )"},{"path":"/reference/correlated_logistic_gaussian_dgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate correlated Gaussian covariates and (binary) logistic response data. ‚Äî correlated_logistic_gaussian_dgp","text":"n Number samples. p_uncorr Number uncorrelated features. p_corr Number features correlated group. s_uncorr Sparsity level features uncorrelated group. Coefficients corresponding features s_uncorr position (.e., positions = s_uncorr + 1, ..., p_uncorr) set 0. s_corr Sparsity level features correlated group. Coefficients corresponding features s_corr position (.e., positions = s_corr + 1, ..., p_corr) set 0. corr Correlation features correlated group. betas_uncorr Coefficient vector uncorrelated features. scalar provided, coefficient vector constant. NULL (default), entries coefficient vector drawn iid N(0, betas_uncorr_sd^2). Can also function generates coefficient vector; see generate_coef(). betas_corr Coefficient vector correlated features. scalar provided, coefficient vector constant. NULL (default), entries coefficient vector drawn iid N(0, betas_corr_sd^2). Can also function generates coefficient vector; see generate_coef(). betas_uncorr_sd (Optional) SD normal distribution draw betas_uncorr. used betas_uncorr argument NULL function case betas_uncorr_sd optionally passed function sd; see generate_coef(). betas_corr_sd (Optional) SD normal distribution draw betas_corr. used betas_corr argument NULL function case betas_corr_sd optionally passed function sd; see generate_coef(). intercept Scalar intercept term. data_split Logical; TRUE, splits data training test sets according train_prop. train_prop Proportion data training set data_split = TRUE. return_values Character vector indicating objects return list. Elements vector must one \"X\", \"y\", \"support\". ... used.","code":""},{"path":"/reference/correlated_logistic_gaussian_dgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate correlated Gaussian covariates and (binary) logistic response data. ‚Äî correlated_logistic_gaussian_dgp","text":"list named objects requested return_values. See brief descriptions . X data.frame. y response vector length nrow(X). support vector feature indices indicating features used true support DGP. Note data_split = TRUE \"X\", \"y\" return_values, returned list also contains slots \"Xtest\" \"ytest\".","code":""},{"path":"/reference/correlated_logistic_gaussian_dgp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate correlated Gaussian covariates and (binary) logistic response data. ‚Äî correlated_logistic_gaussian_dgp","text":"Data generated via: $$log(p / (1 - p)) = intercept + betas_uncorr \\%\\emph{\\% X_uncorr + betas_corr \\%}\\% X_corr,$$ p = P(y = 1 | X), X_uncorr (uncorrelated) standard Gaussian random matrix, X_corr correlated Gaussian random matrix variance 1 Cor(X_corr_i, X_corr_j) = corr , j. true underlying support data first s_uncorr s_corr features X_uncorr X_corr respectively.","code":""},{"path":"/reference/correlated_logistic_gaussian_dgp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate correlated Gaussian covariates and (binary) logistic response data. ‚Äî correlated_logistic_gaussian_dgp","text":"","code":"# generate data from: log(p / (1 - p)) = betas_corr_1 * x_corr_1 + betas_corr_2 * x_corr_2, # where betas_corr_1, betas_corr_2 ~ N(0, 1), # Var(X_corr_i) = 1, Cor(X_corr_i, X_corr_j) = 0.7 for all i, j = 1, ..., 10 sim_data <- correlated_logistic_gaussian_dgp(n = 100, p_uncorr = 0, p_corr = 10,                                              s_corr = 2, corr = 0.7)  # generate data from: log(p / (1 - p)) = betas_uncorr %*% X_uncorr - X_corr_1, # where betas_uncorr ~ N(0, .5), betas_corr = [-1, 0], X_uncorr ~ N(0, I_10), # X_corr ~ N(0, Sigma), Sigma has 1s on diagonals and 0.7 elsewhere. sim_data <- correlated_logistic_gaussian_dgp(n = 100, p_uncorr = 10, p_corr = 2,                                              corr = 0.7, betas_uncorr_sd = 1,                                              betas_corr = c(-1, 0))"},{"path":"/reference/correlated_lss_gaussian_dgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate correlated Gaussian covariates and LSS response data. ‚Äî correlated_lss_gaussian_dgp","title":"Generate correlated Gaussian covariates and LSS response data. ‚Äî correlated_lss_gaussian_dgp","text":"Generate normally-distributed covariates potentially correlated LSS response data specified error distribution.","code":""},{"path":"/reference/correlated_lss_gaussian_dgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate correlated Gaussian covariates and LSS response data. ‚Äî correlated_lss_gaussian_dgp","text":"","code":"correlated_lss_gaussian_dgp(   n,   p_uncorr,   p_corr,   s_uncorr = p_uncorr,   s_corr = p_corr,   corr,   k,   thresholds = 0,   signs = 1,   betas = 1,   intercept = 0,   overlap = FALSE,   mixed_int = FALSE,   err = NULL,   data_split = FALSE,   train_prop = 0.5,   return_values = c(\"X\", \"y\", \"support\"),   ... )"},{"path":"/reference/correlated_lss_gaussian_dgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate correlated Gaussian covariates and LSS response data. ‚Äî correlated_lss_gaussian_dgp","text":"n Number samples. p_uncorr Number uncorrelated features. p_corr Number features correlated group. s_uncorr Number interactions features uncorrelated group. s_corr Number interactions features correlated group. corr Correlation features correlated group. k Order interactions. thresholds scalar s x k matrix thresholds term LSS model. signs scalar s x k matrix sign interaction (1 means > -1 means <). betas Scalar, vector, function generate coefficients corresponding interaction terms. See \\codegenerate_coef(). intercept Scalar intercept term. overlap TRUE, simulate support indices replacement; FALSE, simulate support indices without replacement (overlap) mixed_int TRUE, correlated uncorrelated variables mixed together constructing interaction order-k. FALSE, interaction order-k composed correlated variables uncorrelated variables. err Function generate simulated error vector. Default NULL adds error DGP. data_split Logical; TRUE, splits data training test sets according train_prop. train_prop Proportion data training set data_split = TRUE. return_values Character vector indicating objects return list. Elements vector must one \"X\", \"y\", \"support\", \"int_support\". ... arguments pass err() generate error vector.","code":""},{"path":"/reference/correlated_lss_gaussian_dgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate correlated Gaussian covariates and LSS response data. ‚Äî correlated_lss_gaussian_dgp","text":"list named objects requested return_values. See brief descriptions . X data.frame. y response vector length nrow(X). support vector feature indices indicating features used true support DGP. int_support vector signed feature indices true (interaction) support DGP. example, \"1+_2-\" means interaction high values feature 1 low values feature 2 appears underlying DGP. Note data_split = TRUE \"X\", \"y\" return_values, returned list also contains slots \"Xtest\" \"ytest\".","code":""},{"path":"/reference/correlated_lss_gaussian_dgp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate correlated Gaussian covariates and LSS response data. ‚Äî correlated_lss_gaussian_dgp","text":"Data generated via: $$y = intercept + sum_{= 1}^{s} beta_i prod_{j = 1}^{k}1(X_{S_j} lessgtr thresholds_ij) + err(...),$$ X = [X_uncorr, X_corr], X_uncorr (uncorrelated) standard Gaussian random matrix, X_corr correlated Gaussian random matrix variance 1 Cor(X_corr_i, X_corr_j) = corr , j. overlap = TRUE, true interaction support randomly chosen (p_uncorr + p_corr) features X. overlap = FALSE, true interaction support sequentially taken first s_uncorr*k features X_uncorr first s_corr*k features X_corr. details LSS model, see Behr, Merle, et al. \"Provable Boolean Interaction Recovery Tree Ensemble obtained via Random Forests.\" arXiv preprint arXiv:2102.11800 (2021).","code":""},{"path":"/reference/correlated_lss_gaussian_dgp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate correlated Gaussian covariates and LSS response data. ‚Äî correlated_lss_gaussian_dgp","text":"","code":"# generate data from: y = 1(X_1 > 0, X_2 > 0) + 1(X_3 > 0, X_4 > 0), where # X is a 100 x 10 correlated Gaussian random matrix with # Var(X_i) = 1 for all i and Cor(X_i, X_j) = 0.7 for all i != j sim_data <- correlated_lss_gaussian_dgp(n = 100, p_uncorr = 0, p_corr = 10,                                         k = 2, s_corr = 2, corr = 0.7,                                         thresholds = 0, signs = 1, betas = 1)  # generate data from: y = 3 * 1(X_1 > 0, X_2 > 0) - 1(X_11 > 0, X_12 > 0) + N(0, 1), # where X = [Z, U], Z is a 100 x 10 standard Gaussian random matrix, # U is a 100 x 10 Gaussian random matrix with Var(U_i) = 1 and Cor(U_i, U_j) = 0.7 sim_data <- correlated_lss_gaussian_dgp(n = 100, p_uncorr = 10, p_corr = 10,                                         s_uncorr = 1, s_corr = 1, corr = 0.7,                                         k = 2, betas = c(3, -1), err = rnorm)  # generate data from: y = \\sum_{i = 1}^{4} \\prod_{j = 1}^{2} 1(X_{s_j} > 0), # where s_j \\in {1:4, 11:14} are randomly selected indiceds, X = [Z, U], # Z is a 100 x 10 standard Gaussian random matrix, U is a 100 x 10 Gaussian # random matrix with Var(U_i) = 1 and Cor(U_i, U_j) = 0.7 # i.e., interactions may consist of both correlated and uncorrelated features sim_data <- correlated_lss_gaussian_dgp(n = 100, p_uncorr = 10, p_corr = 10,                                         s_uncorr = 2, s_corr = 2, k = 2,                                         corr = 0.7, mixed_int = TRUE)"},{"path":"/reference/dots_to_fun_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to process ... args to pass to multiple functions. ‚Äî dots_to_fun_args","title":"Helper function to process ... args to pass to multiple functions. ‚Äî dots_to_fun_args","text":"Helper function process ... args pass multiple functions.","code":""},{"path":"/reference/dots_to_fun_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to process ... args to pass to multiple functions. ‚Äî dots_to_fun_args","text":"","code":"dots_to_fun_args(   prefix = c(\"X\", \"U\", \"y\", \"err\", \"betas\", \"betas_unobs\", \"betas_corr\",     \"betas_uncorr\"),   ... )"},{"path":"/reference/dots_to_fun_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to process ... args to pass to multiple functions. ‚Äî dots_to_fun_args","text":"prefix Character vector arbitrary prefixes use splitting entries .... example, .X_p .U_p ..., vector include \"X\" \"U\" function look arguments name prefixed \".X_\" \".U_\". ... Named arguments process.","code":""},{"path":"/reference/dots_to_fun_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to process ... args to pass to multiple functions. ‚Äî dots_to_fun_args","text":"list \".optional_args\" well entries named like \".X_args\". example, \"X\" one elements input character vector prefix .X_p = 1 .X_s   = 2 passed via ..., \".X_args\" entry output list codelist(p = 1, s = 2). default value prefix, output list following entries: .X_args Args pass function generates X. .U_args Args pass function generates U. .y_args Args pass function generates y. .err_args Args pass function generates err. .betas_args Args pass function generates betas. .betas_unobs_args Args pass function generates betas_unobs. .betas_corr_args Args pass function generates betas_corr. .betas_uncorr_args Args pass function generates betas_uncorr. .optional_args Args pass optionally functions.","code":""},{"path":"/reference/generate_X_gaussian.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a normal random matrix of covariates/features. ‚Äî generate_X_gaussian","title":"Generate a normal random matrix of covariates/features. ‚Äî generate_X_gaussian","text":"Generate .n x .p normal random matrix specified mean covariance structure.","code":""},{"path":"/reference/generate_X_gaussian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a normal random matrix of covariates/features. ‚Äî generate_X_gaussian","text":"","code":"generate_X_gaussian(.n, .p, .mean = 0, .sd = 1, .corr = 0, .Sigma = NULL)"},{"path":"/reference/generate_X_gaussian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a normal random matrix of covariates/features. ‚Äî generate_X_gaussian","text":".n Number samples. .p Number features. .mean Mean normal distribution generate data. Can either scalar value vector length .p. Default 0. .sd Standard deviation normal distribution generate data. Default 1. .corr Correlation pairs features. Default 0 correlation. .Sigma (Optional) .p x .p covariance matrix normal distribution generate data. Default NULL (used). provided, arguments corr sd ignored.","code":""},{"path":"/reference/generate_X_gaussian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a normal random matrix of covariates/features. ‚Äî generate_X_gaussian","text":"normal random matrix size n. x .p.","code":""},{"path":"/reference/generate_X_gaussian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a normal random matrix of covariates/features. ‚Äî generate_X_gaussian","text":"","code":"# Returns 100 x 10 random Gaussian matrix with X_ij ~ N(0, 1) X <- generate_X_gaussian(.n = 100, .p = 10)  # Returns 100 x 10 random Gaussian matrix with E(X_i) = 0 for all i, # Var(X_i) = 4 for all i, and Cor(X_i, X_j) = 0.7 for all i != j X <- generate_X_gaussian(.n = 100, .p = 10, .sd = 2, .corr = 0.7)  # Returns 100 x 2 random Gaussian matrix: X ~ N(0, Sigma), where # Sigma = [3, .5; .5, 1] X <- generate_X_gaussian(   .n = 100, .p = 2, .Sigma = matrix(c(3, .5, .5, 1), nrow = 2, byrow = TRUE) )"},{"path":"/reference/generate_X_rwd.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a design matrix X by sampling from a real-world data matrix. ‚Äî generate_X_rwd","title":"Generate a design matrix X by sampling from a real-world data matrix. ‚Äî generate_X_rwd","text":"Generate design matrix X sampling real-world data matrix specified sampling scheme.","code":""},{"path":"/reference/generate_X_rwd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a design matrix X by sampling from a real-world data matrix. ‚Äî generate_X_rwd","text":"","code":"generate_X_rwd(X, n = nrow(X), p = ncol(X), clusters = NULL, replace = FALSE)"},{"path":"/reference/generate_X_rwd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a design matrix X by sampling from a real-world data matrix. ‚Äî generate_X_rwd","text":"X Data matrix data frame. n Number samples clusters NULL. clusters = NULL, number clusters. p Number features. p < ncol(X), p features sampled uniformly random full feature set. clusters (Optional) Vector cluster IDs. provided, block clustered sampling performed according clusters cluster entirely entirely retrieved sample. replace Logical. TRUE, sample observations replacement; FALSE, sample observations without replacement","code":""},{"path":"/reference/generate_X_rwd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a design matrix X by sampling from a real-world data matrix. ‚Äî generate_X_rwd","text":"matrix size n x p.","code":""},{"path":"/reference/generate_X_rwd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a design matrix X by sampling from a real-world data matrix. ‚Äî generate_X_rwd","text":"","code":"# get bootstrap samples from iris data set X <- generate_X_rwd(X = iris, replace = TRUE)  # leave one batch out from iris data set batch_ids <- rep(1:3, length.out = nrow(iris)) X <- generate_X_rwd(X = iris, n = 2, clusters = batch_ids)"},{"path":"/reference/generate_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to generate a coefficient vector. ‚Äî generate_coef","title":"Helper function to generate a coefficient vector. ‚Äî generate_coef","text":"Generate coefficient vector specified dimensions sparsity level.","code":""},{"path":"/reference/generate_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to generate a coefficient vector. ‚Äî generate_coef","text":"","code":"generate_coef(.betas = NULL, .p = 1, .s = .p, .betas_name = \"betas\", ...)"},{"path":"/reference/generate_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to generate a coefficient vector. ‚Äî generate_coef","text":".betas Coefficient vector function generate coefficients. scalar provided, coefficient vector constant vector. NULL (default), .s non-zero entries coefficient vector equal 0.5. function, must take one n, .s, .p, can optionally take .betas_name, along user-defined args ...) must return numeric vector length 1, .s, .p. function take n .s .p, .s passed n. .p Number features. .s Sparsity level. Coefficients corresponding features sth position (.e., positions = s + 1, ..., p) set 0. .betas_name Name coefficient variable use error message. ... Additional user arguments pass .betas .betas function.","code":""},{"path":"/reference/generate_coef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to generate a coefficient vector. ‚Äî generate_coef","text":"vector length .p.","code":""},{"path":"/reference/generate_coef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to generate a coefficient vector. ‚Äî generate_coef","text":"","code":"# generate constant beta = 0.5 of dimension 10 beta <- generate_coef(.p = 10)  # generate beta ~ N(1, 2) of dimension 10 beta <- generate_coef(rnorm, .p = 10, mean = 1, sd = 2)  # generate beta = [1, 1, 0, 0, 0] beta <- generate_coef(.betas = 1, .p = 5, .s = 2)  # generate beta = [1, 2, 3] beta <- generate_coef(.betas = 1:3, .p = 3)  # use a function to generate beta beta_fun <- function(.s, df) {   return(rt(n = .s, df = df)) } beta <- generate_coef(.betas = beta_fun, .p = 10, .s = 3, df = 10)  # we can do the same without wrapping rt beta <- generate_coef(.betas = rt, .p = 10, .s = 3, df = 10)"},{"path":"/reference/generate_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to generate simulated errors. ‚Äî generate_errors","title":"Helper function to generate simulated errors. ‚Äî generate_errors","text":"Generate simulated errors specified error function passed arguments.","code":""},{"path":"/reference/generate_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to generate simulated errors. ‚Äî generate_errors","text":"","code":"generate_errors(err = NULL, n, X, ...)"},{"path":"/reference/generate_errors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to generate simulated errors. ‚Äî generate_errors","text":"err Function generate simulate error vector. Default NULL returns error vector zeros. n Number samples. X Data matrix data frame. Used determine n n missing. ... arguments pass err() generate error vector.","code":""},{"path":"/reference/generate_errors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to generate simulated errors. ‚Äî generate_errors","text":"vector simulated errors length n.","code":""},{"path":"/reference/generate_errors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper function to generate simulated errors. ‚Äî generate_errors","text":"arguments n X (provided) automatically passed function err arguments name. Note however may unused arguments err take arguments named n /X input.","code":""},{"path":"/reference/generate_errors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to generate simulated errors. ‚Äî generate_errors","text":"","code":"# generate standard Gaussian error vector of length 150 errs <- generate_errors(err = rnorm, n = 150) # or alternatively, errs <- generate_errors(err = rnorm, X = iris)  # generate Gaussian error vector with mean 0 and sd 2 errs <- generate_errors(err = rnorm, n = 150, sd = 2)  # generate error vector of all 0s errs <- generate_errors(err = NULL, n = 150)  # generate error vector from custom error function err_fun <- function(n, rho) {   # simulate correlated errors from a autoregressive-1 Gaussian process   row1 <- rho^(0:(n - 1))   Sigma <- stats::toeplitz(row1)   return(MASS::mvrnorm(1, mu = rep(0, n), Sigma = Sigma)) }  errs <- generate_errors(err = err_fun, n = 100, rho = 0.75)"},{"path":"/reference/generate_y_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate linear response data. ‚Äî generate_y_linear","title":"Simulate linear response data. ‚Äî generate_y_linear","text":"Generate linear response data specified error distribution given observed unobserved design matrices.","code":""},{"path":"/reference/generate_y_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate linear response data. ‚Äî generate_y_linear","text":"","code":"generate_y_linear(   X,   U,   betas = NULL,   betas_unobs = NULL,   intercept = 0,   err = NULL,   return_support = FALSE,   ... )"},{"path":"/reference/generate_y_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate linear response data. ‚Äî generate_y_linear","text":"X Design data matrix observed variables. U Design data matrix unobserved (omitted) variables. betas Coefficient vector observed design matrix. scalar provided, coefficient vector constant. NULL (default), entries coefficient vector drawn iid N(0, betas_sd^2). Can also function generates coefficient vector; see generate_coef(). betas_unobs Coefficient vector unobserved design matrix. scalar provided, coefficient vector constant. NULL (default), entries coefficient vector drawn iid N(0, betas_unobs_sd^2). Can also function generates coefficient vector; see generate_coef(). intercept Scalar intercept term. err Function generate simulated error vector. Default NULL adds error DGP. return_support Logical specifying whether return vector support column names. X column names, indices support used. ... Additional arguments pass functions generate betas, betas_unobs, err. argument exist one functions ignored. two functions argument name different values, use one following prefixes front argument name (passed via ...) differentiate : .betas_, .betas_unobs_, .err_. additional details, see generate_coef() generate_errors()","code":""},{"path":"/reference/generate_y_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate linear response data. ‚Äî generate_y_linear","text":"return_support = TRUE, returns list two: y response vector length nrow(X). support vector feature indices indicating features used true support DGP. return_support = FALSE, returns response vector y.","code":""},{"path":"/reference/generate_y_linear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate linear response data. ‚Äî generate_y_linear","text":"","code":"X <- generate_X_gaussian(.n = 100, .p = 2) U <- generate_X_gaussian(.n = 100, .p = 2)  # generate the response from: y = 3*x_1 - x_2 + N(0, 1) errors y <- generate_y_linear(X = X, betas = c(3, -1), err = rnorm)  # generate the response from: y = 3*x_1 - x_2 + u_1 + 2*u_2 y <- generate_y_linear(X = X, U = U, betas = c(3, -1), betas_unobs = c(1, 2))"},{"path":"/reference/generate_y_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate (binary) logistic response data. ‚Äî generate_y_logistic","title":"Simulate (binary) logistic response data. ‚Äî generate_y_logistic","text":"Generate (binary) logistic response data given observed design matrices.","code":""},{"path":"/reference/generate_y_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate (binary) logistic response data. ‚Äî generate_y_logistic","text":"","code":"generate_y_logistic(X, betas = 0, intercept = 0, return_support = FALSE, ...)"},{"path":"/reference/generate_y_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate (binary) logistic response data. ‚Äî generate_y_logistic","text":"X Design data matrix observed variables. betas Coefficient vector observed design matrix. scalar provided, coefficient vector constant. NULL (default), entries coefficient vector drawn iid N(0, betas_sd^2). Can also function generates coefficient vector; see generate_coef(). intercept Scalar intercept term. return_support Logical specifying whether return vector support column names. X column names, indices support used. ... used.","code":""},{"path":"/reference/generate_y_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate (binary) logistic response data. ‚Äî generate_y_logistic","text":"return_support = TRUE, returns list two: y response vector length nrow(X). support vector feature indices indicating features used true support DGP. return_support = FALSE, returns response vector y.","code":""},{"path":"/reference/generate_y_logistic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate (binary) logistic response data. ‚Äî generate_y_logistic","text":"","code":"X <- generate_X_gaussian(.n = 100, .p = 2)  # generate the response from: log(p / (1 - p)) = 3*x_1 - x_2 # where p = P(y  = 1 | x) y <- generate_y_logistic(X = X, betas = c(3, -1))"},{"path":"/reference/generate_y_lss.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate locally spiky smooth (LSS) response data. ‚Äî generate_y_lss","title":"Generate locally spiky smooth (LSS) response data. ‚Äî generate_y_lss","text":"Generate LSS response data specified error distribution given observed data matrices.","code":""},{"path":"/reference/generate_y_lss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate locally spiky smooth (LSS) response data. ‚Äî generate_y_lss","text":"","code":"generate_y_lss(   X,   k,   s,   thresholds = 1,   signs = 1,   betas = 1,   intercept = 0,   overlap = FALSE,   err = NULL,   return_support = FALSE,   ... )"},{"path":"/reference/generate_y_lss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate locally spiky smooth (LSS) response data. ‚Äî generate_y_lss","text":"X Data matrix data frame. k Order interactions. s Number interactions LSS model matrix support indices interaction taking row matrix ncol = k. thresholds scalar s x k matrix thresholds term LSS model. signs scalar s x k matrix sign interaction (1 means > -1 means <). betas Scalar, vector, function generate coefficients corresponding interaction terms. See \\codegenerate_coef(). intercept Scalar intercept term. overlap TRUE, simulate support indices replacement; FALSE, simulate support indices without replacement (overlap) err Function generate simulated error vector. Default NULL adds error DGP. return_support Logical specifying whether return vector support column names. X column names, indices support used. ... arguments pass err() generate error vector.","code":""},{"path":"/reference/generate_y_lss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate locally spiky smooth (LSS) response data. ‚Äî generate_y_lss","text":"return_support = TRUE, returns list three: y response vector length nrow(X). support vector feature indices indicating features used true support DGP. int_support vector signed feature indices true (interaction) support DGP. example, \"1+_2-\" means interaction high values feature 1 low values feature 2 appears underlying DGP. return_support = FALSE, returns response vector y.","code":""},{"path":"/reference/generate_y_lss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate locally spiky smooth (LSS) response data. ‚Äî generate_y_lss","text":", data generated following LSS model: $$E(Y|X) = intercept + sum_{= 1}^{s} beta_i prod_{j = 1}^{k}1(X_{S_j} \tlessgtr thresholds_ij)$$ details LSS model, see Behr, Merle, et al. \"Provable Boolean Interaction Recovery Tree Ensemble obtained via Random Forests.\" arXiv preprint arXiv:2102.11800 (2021).","code":""},{"path":"/reference/generate_y_lss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate locally spiky smooth (LSS) response data. ‚Äî generate_y_lss","text":"","code":"X <- generate_X_gaussian(.n = 100, .p = 10)  # generate data from: y = 1(X_1 > 0, X_2 > 0) + 1(X_3 > 0, X_4 > 0) y <- generate_y_lss(X = X, k = 2, s = matrix(1:4, nrow = 2, byrow = TRUE),                     thresholds = 0, signs = 1, betas = 1)  # generate data from: y = 3 * 1(X_1 < 0) - 1(X_2 > 1) + N(0, 1) y <- generate_y_lss(X = X, k = 1,                      s = matrix(1:2, nrow = 2),                     thresholds = matrix(0:1, nrow = 2),                      signs = matrix(c(-1, 1), nrow = 2),                     betas = c(3, -1),                     err = rnorm)"},{"path":"/reference/indicator.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to compute indicator function in LSS model. ‚Äî indicator","title":"Helper function to compute indicator function in LSS model. ‚Äî indicator","text":"Helper function compute indicator function LSS model.","code":""},{"path":"/reference/indicator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to compute indicator function in LSS model. ‚Äî indicator","text":"","code":"indicator(X, thresh, sgn)"},{"path":"/reference/indicator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to compute indicator function in LSS model. ‚Äî indicator","text":"X Data matrix data frame. thresh thresholds sgn sign interaction","code":""},{"path":"/reference/linear_gaussian_dgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate independent Gaussian covariates and linear response data. ‚Äî linear_gaussian_dgp","title":"Generate independent Gaussian covariates and linear response data. ‚Äî linear_gaussian_dgp","text":"Generate independent normally-distributed covariates (including potentially omitted variables) linear response data specified error distribution.","code":""},{"path":"/reference/linear_gaussian_dgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate independent Gaussian covariates and linear response data. ‚Äî linear_gaussian_dgp","text":"","code":"linear_gaussian_dgp(   n,   p_obs = 0,   p_unobs = 0,   s_obs = p_obs,   s_unobs = p_unobs,   betas = NULL,   betas_unobs = NULL,   intercept = 0,   err = NULL,   data_split = FALSE,   train_prop = 0.5,   return_values = c(\"X\", \"y\", \"support\"),   ... )"},{"path":"/reference/linear_gaussian_dgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate independent Gaussian covariates and linear response data. ‚Äî linear_gaussian_dgp","text":"n Number samples. p_obs Number observed features. p_unobs Number unobserved (omitted) features. s_obs Sparsity level observed features. Coefficients corresponding features s_obs position (.e., positions = s_obs + 1, ..., p_obs) set 0. s_unobs Sparsity level unobserved (omitted) features. Coefficients corresponding features s_unobs position (.e., positions = s_unobs + 1, ..., p_unobs) set 0. betas Coefficient vector observed design matrix. scalar provided, coefficient vector constant. NULL (default), entries coefficient vector drawn iid N(0, betas_sd^2). Can also function generates coefficient vector; see generate_coef(). betas_unobs Coefficient vector unobserved design matrix. scalar provided, coefficient vector constant. NULL (default), entries coefficient vector drawn iid N(0, betas_unobs_sd^2). Can also function generates coefficient vector; see generate_coef(). intercept Scalar intercept term. err Function generate simulated error vector. Default NULL adds error DGP. data_split Logical; TRUE, splits data training test sets according train_prop. train_prop Proportion data training set data_split = TRUE. return_values Character vector indicating objects return list. Elements vector must one \"X\", \"y\", \"support\". ... Additional arguments pass functions generate X, U, y, betas, betas_unobs, err. argument exist one functions ignored. two functions argument name different values, use one following prefixes front argument name (passed via ...) differentiate : .X_, .U_, .y_, .betas_, .betas_unobs_, .err_. additional details, see generate_X_gaussian(), generate_y_linear(), generate_coef(), generate_errors()","code":""},{"path":"/reference/linear_gaussian_dgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate independent Gaussian covariates and linear response data. ‚Äî linear_gaussian_dgp","text":"list named objects requested return_values. See brief descriptions . X data.frame. y response vector length nrow(X). support vector feature indices indicating features used true support DGP. Note data_split = TRUE \"X\", \"y\" return_values, returned list also contains slots \"Xtest\" \"ytest\".","code":""},{"path":"/reference/linear_gaussian_dgp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate independent Gaussian covariates and linear response data. ‚Äî linear_gaussian_dgp","text":"Data generated via: $$y = intercept + betas \\%\\emph{\\% X + betas_unobs \\%}\\% U + err(...),$$ X, U standard Gaussian random matrices true underlying support data first s_obs s_unobs features X U respectively.","code":""},{"path":"/reference/linear_gaussian_dgp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate independent Gaussian covariates and linear response data. ‚Äî linear_gaussian_dgp","text":"","code":"# generate data from: y = betas_1 * x_1 + betas_2 * x_2 + N(0, 0.5), where # betas_1, betas_2 ~ N(0, 1) and X ~ N(0, I_10) sim_data <- linear_gaussian_dgp(n = 100, p_obs = 10, s_obs = 2, betas_sd = 1,                                 err = rnorm, sd = .5)  # generate data from y = betas %*% X - u_1 + t(df = 1), where # betas ~ N(0, .5), betas_unobs = [-1, 0], X ~ N(0, I_10), U ~ N(0, I_2) sim_data <- linear_gaussian_dgp(n = 100, p_obs = 10, p_unobs = 2,                                 betas_sd = .5, betas_unobs = c(-1, 0),                                 err = rt, df = 1)"},{"path":"/reference/logistic_gaussian_dgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate independent Gaussian covariates and (binary) logistic response data. ‚Äî logistic_gaussian_dgp","title":"Generate independent Gaussian covariates and (binary) logistic response data. ‚Äî logistic_gaussian_dgp","text":"Generate independent normally-distributed covariates logistic response data.","code":""},{"path":"/reference/logistic_gaussian_dgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate independent Gaussian covariates and (binary) logistic response data. ‚Äî logistic_gaussian_dgp","text":"","code":"logistic_gaussian_dgp(   n,   p,   s = p,   betas = NULL,   betas_sd = 1,   intercept = 0,   data_split = FALSE,   train_prop = 0.5,   return_values = c(\"X\", \"y\", \"support\"),   ... )"},{"path":"/reference/logistic_gaussian_dgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate independent Gaussian covariates and (binary) logistic response data. ‚Äî logistic_gaussian_dgp","text":"n Number samples. p Number features. s Sparsity level features. Coefficients corresponding features s position (.e., positions = s + 1, ..., p) set 0. betas Coefficient vector observed design matrix. scalar provided, coefficient vector constant. NULL (default), entries coefficient vector drawn iid N(0, betas_sd^2). Can also function generates coefficient vector; see generate_coef(). betas_sd (Optional) SD normal distribution draw betas. used betas argument NULL function case betas_sd optionally passed function sd; see generate_coef(). intercept Scalar intercept term. data_split Logical; TRUE, splits data training test sets according train_prop. train_prop Proportion data training set data_split = TRUE. return_values Character vector indicating objects return list. Elements vector must one \"X\", \"y\", \"support\". ... used.","code":""},{"path":"/reference/logistic_gaussian_dgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate independent Gaussian covariates and (binary) logistic response data. ‚Äî logistic_gaussian_dgp","text":"list named objects requested return_values. See brief descriptions . X data.frame. y response vector length nrow(X). support vector feature indices indicating features used true support DGP. Note data_split = TRUE \"X\", \"y\" return_values, returned list also contains slots \"Xtest\" \"ytest\".","code":""},{"path":"/reference/logistic_gaussian_dgp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate independent Gaussian covariates and (binary) logistic response data. ‚Äî logistic_gaussian_dgp","text":"Data generated via: $$log(p / (1 - p)) = intercept + betas \\%*\\% X,$$ p = P(y = 1 | X), X standard Gaussian random matrix, true underlying support data first s features X (unless specified otherwise betas).","code":""},{"path":"/reference/logistic_gaussian_dgp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate independent Gaussian covariates and (binary) logistic response data. ‚Äî logistic_gaussian_dgp","text":"","code":"# generate data from: log(p / (1 - p)) = betas_1 * x_1 + betas_2 * x_2, where # betas_1, betas_2 ~ N(0, 1) and X ~ N(0, I_10) sim_data <- logistic_gaussian_dgp(n = 100, p = 10, s = 2, betas_sd = 1)"},{"path":"/reference/lss_gaussian_dgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate independent Gaussian covariates and LSS response data. ‚Äî lss_gaussian_dgp","title":"Generate independent Gaussian covariates and LSS response data. ‚Äî lss_gaussian_dgp","text":"Generate independent normally-distributed covariates LSS response data specified error distribution.","code":""},{"path":"/reference/lss_gaussian_dgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate independent Gaussian covariates and LSS response data. ‚Äî lss_gaussian_dgp","text":"","code":"lss_gaussian_dgp(   n,   p,   k,   s,   thresholds = 0,   signs = 1,   betas = 1,   intercept = 0,   overlap = FALSE,   err = NULL,   data_split = FALSE,   train_prop = 0.5,   return_values = c(\"X\", \"y\", \"support\"),   ... )"},{"path":"/reference/lss_gaussian_dgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate independent Gaussian covariates and LSS response data. ‚Äî lss_gaussian_dgp","text":"n Number samples. p Number features. k Order interactions. s Number interactions LSS model matrix support indices interaction taking row matrix ncol = k. thresholds scalar s x k matrix thresholds term LSS model. signs scalar s x k matrix sign interaction (1 means > -1 means <). betas Scalar, vector, function generate coefficients corresponding interaction terms. See \\codegenerate_coef(). intercept Scalar intercept term. overlap TRUE, simulate support indices replacement; FALSE, simulate support indices without replacement (overlap) err Function generate simulated error vector. Default NULL adds error DGP. data_split Logical; TRUE, splits data training test sets according train_prop. train_prop Proportion data training set data_split = TRUE. return_values Character vector indicating objects return list. Elements vector must one \"X\", \"y\", \"support\", \"int_support\". ... arguments pass err() generate error vector.","code":""},{"path":"/reference/lss_gaussian_dgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate independent Gaussian covariates and LSS response data. ‚Äî lss_gaussian_dgp","text":"list named objects requested return_values. See brief descriptions . X data.frame. y response vector length nrow(X). support vector feature indices indicating features used true support DGP. int_support vector signed feature indices true (interaction) support DGP. example, \"1+_2-\" means interaction high values feature 1 low values feature 2 appears underlying DGP. Note data_split = TRUE \"X\", \"y\" return_values, returned list also contains slots \"Xtest\" \"ytest\".","code":""},{"path":"/reference/lss_gaussian_dgp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate independent Gaussian covariates and LSS response data. ‚Äî lss_gaussian_dgp","text":"Data generated via: $$y = intercept + sum_{= 1}^{s} beta_i prod_{j = 1}^{k}1(X_{S_j} lessgtr thresholds_ij) + err(...),$$ X standard Gaussian random matrix. overlap = TRUE, true interaction support randomly chosen p features X. overlap = FALSE, true interaction support sequentially taken first s*k features X. details LSS model, see Behr, Merle, et al. \"Provable Boolean Interaction Recovery Tree Ensemble obtained via Random Forests.\" arXiv preprint arXiv:2102.11800 (2021).","code":""},{"path":"/reference/lss_gaussian_dgp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate independent Gaussian covariates and LSS response data. ‚Äî lss_gaussian_dgp","text":"","code":"# generate data from: y = 1(X_1 > 0, X_2 > 0) + 1(X_3 > 0, X_4 > 0), where # X is a 100 x 10 standard Gaussian random matrix sim_data <- lss_gaussian_dgp(n = 100, p = 10, k = 2, s = 2,                              thresholds = 0, signs = 1, betas = 1)  # generate data from: y = 3 * 1(X_1 < 0) - 1(X_2 > 1) + N(0, 1), where # X is a 100 x 10 standard Gaussian random matrix sim_data <- lss_gaussian_dgp(n = 100, p = 10, k = 1, s = 2,                              thresholds = matrix(0:1, nrow = 2),                              signs = matrix(c(-1, 1), nrow = 2),                              betas = c(3, -1),                              err = rnorm)"},{"path":"/reference/norm_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate heteroskedastic Gaussian errors based on the norm of X. ‚Äî norm_errors","title":"Generate heteroskedastic Gaussian errors based on the norm of X. ‚Äî norm_errors","text":"Generate independent Gaussian errors variance proportional norm row observations data matrix X. , epsilon_i ~ N(0, scale * ||x_i||_2^2).","code":""},{"path":"/reference/norm_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate heteroskedastic Gaussian errors based on the norm of X. ‚Äî norm_errors","text":"","code":"norm_errors(X, scale = 1)"},{"path":"/reference/norm_errors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate heteroskedastic Gaussian errors based on the norm of X. ‚Äî norm_errors","text":"X Data matrix data frame. scale Multiplicative scale factor.","code":""},{"path":"/reference/norm_errors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate heteroskedastic Gaussian errors based on the norm of X. ‚Äî norm_errors","text":"vector simulated errors length n.","code":""},{"path":"/reference/norm_errors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate heteroskedastic Gaussian errors based on the norm of X. ‚Äî norm_errors","text":"","code":"errs <- norm_errors(X = iris %>% dplyr::select(-Species))"},{"path":"/reference/omitted_var_dgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate data from a model with omitted variable bias. ‚Äî omitted_var_dgp","title":"Generate data from a model with omitted variable bias. ‚Äî omitted_var_dgp","text":"Takes data-generating process (DGP), induces bias due omitted variable(s). words, function generate design matrix X response vector y according inputted DGP function, return partially missing design matrix, variable/feature columns omitted.","code":""},{"path":"/reference/omitted_var_dgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate data from a model with omitted variable bias. ‚Äî omitted_var_dgp","text":"","code":"omitted_var_dgp(dgp_fun, omitted_vars = 1, ...)"},{"path":"/reference/omitted_var_dgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate data from a model with omitted variable bias. ‚Äî omitted_var_dgp","text":"dgp_fun function generates data according known data-generating process. function return object format output return_DGP_output(). omitted_vars vector indices column names corresponding columns X omitted. ... Additional arguments pass dgp_fun().","code":""},{"path":"/reference/omitted_var_dgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate data from a model with omitted variable bias. ‚Äî omitted_var_dgp","text":"returned object format output dgp_fun(), except specified variables, given omitted_vars, omitted X component support (applicable).","code":""},{"path":"/reference/omitted_var_dgp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate data from a model with omitted variable bias. ‚Äî omitted_var_dgp","text":"","code":"# generate data from a linear gaussian DGP with the first variable missing dgp_out <- omitted_var_dgp(dgp_fun = linear_gaussian_dgp,                            n = 100, p_obs = 10, s_obs = 2,                            omitted_vars = 1) # or equivalently, (minus the difference in column names) dgp_out <- linear_gaussian_dgp(n = 10, p_obs = 9, p_unobs = 1,                                s_obs = 1, s_unobs = 1)"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator ‚Äî %>%","title":"Pipe operator ‚Äî %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator ‚Äî %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator ‚Äî %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator ‚Äî %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/return_DGP_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Developer function to return consistent outputs in DGP. ‚Äî return_DGP_output","title":"Developer function to return consistent outputs in DGP. ‚Äî return_DGP_output","text":"Helper function returns consistent output DGP function.","code":""},{"path":"/reference/return_DGP_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Developer function to return consistent outputs in DGP. ‚Äî return_DGP_output","text":"","code":"return_DGP_output(X, y, support, data_split, train_prop, return_values)"},{"path":"/reference/return_DGP_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Developer function to return consistent outputs in DGP. ‚Äî return_DGP_output","text":"X Data matrix data frame. y Response vector. support Vector feature indices true support DGP. data_split Logical; TRUE, splits data training test sets according train_prop. train_prop Proportion data training set data_split = TRUE. return_values Character vector indicating objects return list. Elements vector must one \"X\", \"y\", \"support\".","code":""},{"path":"/reference/return_DGP_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Developer function to return consistent outputs in DGP. ‚Äî return_DGP_output","text":"list named objects requested return_values. See brief descriptions . X data.frame. y response vector length nrow(X). support vector feature indices indicating features used true support DGP. Note data_split = TRUE \"X\", \"y\" return_values, returned list also contains slots \"Xtest\" \"ytest\".","code":""},{"path":"/reference/return_DGP_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Developer function to return consistent outputs in DGP. ‚Äî return_DGP_output","text":"","code":"# Return training/test splits using iris data and completely dense support  dgp_out <- return_DGP_output(X = iris %>% dplyr::select(-Species),                              y = iris$Species,                              support = 1:4,                              data_split = TRUE,                              train_prop = 0.5,                              return_values = c(\"X\", \"y\", \"support\"))"},{"path":"/reference/rwd_dgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in real world data from X and y. ‚Äî rwd_dgp","title":"Read in real world data from X and y. ‚Äî rwd_dgp","text":"Read real world data X y.","code":""},{"path":"/reference/rwd_dgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in real world data from X and y. ‚Äî rwd_dgp","text":"","code":"rwd_dgp(   X,   y,   support = NULL,   data_split = FALSE,   train_prop = 0.5,   return_values = c(\"X\", \"y\") )"},{"path":"/reference/rwd_dgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in real world data from X and y. ‚Äî rwd_dgp","text":"X Data matrix data frame. y Response vector. support Vector feature indices true support DGP. data_split Logical; TRUE, splits data training test sets according train_prop. train_prop Proportion data training set data_split = TRUE. return_values Character vector indicating objects return list. Elements vector must one \"X\", \"y\", \"support\".","code":""},{"path":"/reference/rwd_dgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in real world data from X and y. ‚Äî rwd_dgp","text":"list named objects requested return_values. See brief descriptions . X data.frame. y response vector length nrow(X). support vector feature indices indicating features used true support DGP. Note data_split = TRUE \"X\", \"y\" return_values, returned list also contains slots \"Xtest\" \"ytest\".","code":""},{"path":"/reference/rwd_dgp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in real world data from X and y. ‚Äî rwd_dgp","text":"","code":"# read in iris data iris_data <- rwd_dgp(X = iris %>% dplyr::select(-Species), y = iris$Species)"},{"path":"/reference/shared_dgp_lib_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Arguments that are shared by multiple DGP library functions. ‚Äî shared_dgp_lib_args","title":"Arguments that are shared by multiple DGP library functions. ‚Äî shared_dgp_lib_args","text":"Arguments shared multiple DGP library functions.","code":""},{"path":"/reference/shared_dgp_lib_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arguments that are shared by multiple DGP library functions. ‚Äî shared_dgp_lib_args","text":"betas Coefficient vector observed design matrix. scalar provided, coefficient vector constant. NULL (default), entries coefficient vector drawn iid N(0, betas_sd^2). Can also function generates coefficient vector; see generate_coef(). betas_sd (Optional) SD normal distribution draw betas. used betas argument NULL function case betas_sd optionally passed function sd; see generate_coef(). betas_unobs Coefficient vector unobserved design matrix. scalar provided, coefficient vector constant. NULL (default), entries coefficient vector drawn iid N(0, betas_unobs_sd^2). Can also function generates coefficient vector; see generate_coef(). betas_unobs_sd (Optional) SD normal distribution draw betas_unobs. used betas_unobs argument NULL function case betas_unobs_sd optionally passed function sd; see generate_coef(). betas_corr Coefficient vector correlated features. scalar provided, coefficient vector constant. NULL (default), entries coefficient vector drawn iid N(0, betas_corr_sd^2). Can also function generates coefficient vector; see generate_coef(). betas_corr_sd (Optional) SD normal distribution draw betas_corr. used betas_corr argument NULL function case betas_corr_sd optionally passed function sd; see generate_coef(). betas_uncorr Coefficient vector uncorrelated features. scalar provided, coefficient vector constant. NULL (default), entries coefficient vector drawn iid N(0, betas_uncorr_sd^2). Can also function generates coefficient vector; see generate_coef(). betas_uncorr_sd (Optional) SD normal distribution draw betas_uncorr. used betas_uncorr argument NULL function case betas_uncorr_sd optionally passed function sd; see generate_coef(). data_split Logical; TRUE, splits data training test sets according train_prop. err Function generate simulated error vector. Default NULL adds error DGP. intercept Scalar intercept term. n, .n Number samples. p, .p Number features. return_support Logical specifying whether return vector support column names. X column names, indices support used. return_values Character vector indicating objects return list. Elements vector must one \"X\", \"y\", \"support\". support Vector feature indices true support DGP. train_prop Proportion data training set data_split = TRUE. X Data matrix data frame. y Response vector. ... arguments pass err() generate error vector.","code":""},{"path":"/reference/shared_dgp_lib_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arguments that are shared by multiple DGP library functions. ‚Äî shared_dgp_lib_args","text":"list named objects requested return_values. See brief descriptions . X data.frame. y response vector length nrow(X). support vector feature indices indicating features used true support DGP. Note data_split = TRUE \"X\", \"y\" return_values, returned list also contains slots \"Xtest\" \"ytest\".","code":""},{"path":"/reference/split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to split data into training and test sets ‚Äî split_data","title":"Helper function to split data into training and test sets ‚Äî split_data","text":"Helper function split data training test sets","code":""},{"path":"/reference/split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to split data into training and test sets ‚Äî split_data","text":"","code":"split_data(X, y, train_prop = 0.5)"},{"path":"/reference/split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to split data into training and test sets ‚Äî split_data","text":"X Data matrix data frame. y Response vector. train_prop Proportion data training set.","code":""},{"path":"/reference/split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to split data into training and test sets ‚Äî split_data","text":"list four: \"X\", \"y\", \"Xtest\", \"ytest\" containing training data, training response, test data, test response, respectively.","code":""},{"path":"/reference/xy_dgp_constructor.html","id":null,"dir":"Reference","previous_headings":"","what":"General DGP constructor function to generate X and y data. ‚Äî xy_dgp_constructor","title":"General DGP constructor function to generate X and y data. ‚Äî xy_dgp_constructor","text":"general DGP constructor function generates X y data supervised learning DGP, provided functions simulating X, y, additive error term.","code":""},{"path":"/reference/xy_dgp_constructor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General DGP constructor function to generate X and y data. ‚Äî xy_dgp_constructor","text":"","code":"xy_dgp_constructor(   n,   X_fun,   y_fun,   err_fun = NULL,   add_err = TRUE,   data_split = FALSE,   train_prop = 0.5,   return_values = c(\"X\", \"y\", \"support\"),   ... )"},{"path":"/reference/xy_dgp_constructor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General DGP constructor function to generate X and y data. ‚Äî xy_dgp_constructor","text":"n Number samples. X_fun Function generate X data. Must take argument n .n determines number observations generate. y_fun Function generate y data. Must take argument X accepts result X_fun. err_fun Function generate error/noise data. Default NULL adds error output y_fun(). add_err Logical. TRUE (default), add result err_fun() result y_fun() obtain simulated response vector. FALSE, return err_fun(y_fun(...), ...) simulated response vector. Note add_err = TRUE return error categorical responses y. data_split Logical; TRUE, splits data training test sets according train_prop. train_prop Proportion data training set data_split = TRUE. return_values Character vector indicating objects return list. Elements vector must one \"X\", \"y\", \"support\". ... Additional arguments pass functions generate X, y, err. argument exist one functions ignored. two functions argument name different values, use one following prefixes front argument name (passed via ...) differentiate : .X_, .y_, .err_.","code":""},{"path":"/reference/xy_dgp_constructor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General DGP constructor function to generate X and y data. ‚Äî xy_dgp_constructor","text":"list named objects requested return_values. See brief descriptions . X data.frame. y response vector length nrow(X). support vector feature indices indicating features used true support DGP. Note data_split = TRUE \"X\", \"y\" return_values, returned list also contains slots \"Xtest\" \"ytest\".","code":""},{"path":"/reference/xy_dgp_constructor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"General DGP constructor function to generate X and y data. ‚Äî xy_dgp_constructor","text":"add_err = TRUE, data generated following additive model: $$y = y_fun(X, ...) + err_fun(X, y_fun(X), ...), X = X_fun(...).$$ add_err = FALSE, data generated via: $$y = err_fun(X, y_fun(X, ...), ...), X = X_fun(...).$$ Note err_fun() allowed depend X y, necessary err_fun() depend X y.","code":""},{"path":"/reference/xy_dgp_constructor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General DGP constructor function to generate X and y data. ‚Äî xy_dgp_constructor","text":"","code":"# generate X = 100 x 10 standard Gaussian, y = linear regression model sim_data <- xy_dgp_constructor(X_fun = MASS::mvrnorm,                                y_fun = generate_y_linear,                                err_fun = rnorm, data_split = TRUE,                                # shared dgp arguments                                n = 100,                                # arguments specifically for X_fun                                .X_mu = rep(0, 10), .X_Sigma = diag(10),                                # arguments specifically for y_fun                                .y_betas = rnorm(10), .y_return_support = TRUE,                                # arguments specifically for err_fun                                .err_sd = 1) # or alternatively, (since arguments of X_fun, y_fun, err_fun are unique, # with the exception of `n`) sim_data <- xy_dgp_constructor(X_fun = MASS::mvrnorm,                                y_fun = generate_y_linear,                                err_fun = rnorm, data_split = TRUE,                                # shared dgp arguments                                n = 100,                                # arguments specifically for X_fun                                mu = rep(0, 10), Sigma = diag(10),                                # arguments specifically for y_fun                                betas = rnorm(10), return_support = TRUE,                                # arguments specifically for err_fun                                sd = 1)"}]
